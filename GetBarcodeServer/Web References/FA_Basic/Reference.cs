//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace GetBarcodeServer.FA_Basic {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckSFCDLSkillOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckATAndTUnitOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckNoTouchLabelUnitOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordMOPickTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRepairZoneRestrictionOperationCompleted;
        
        private System.Threading.SendOrPostCallback BarcodeVerifyByMOOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAutoSwapOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAutoSwapForCFIOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignTempLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseTempLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLightsForOffLineKTLOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOffLineSoftwareRackDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMandatoryDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RaisePackRackRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignIDByUSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTrnStartDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTrnStartDate1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNHighestGroupSeqOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshAssemblyGroupSEQOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkStationGenealogyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationIniOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationIniOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserinformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMoGenealogyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnGenealogyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveProcessStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteRepairOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIn1OperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOut1OperationCompleted;
        
        private System.Threading.SendOrPostCallback BarcodeValidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetESOPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetESOP1OperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestLabelPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestLabelPrintForP2LOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintUnitLabelByP2LRackOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCPNCompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextCPNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextCPN1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ChkRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSamplingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUPNPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUPNPackage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePackageIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePackageID1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadMACOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSamplingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextStageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCOAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMACOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMACOUIOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRoHSItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyRoHSPairOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyRoHSPair1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGPInforOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback HoldOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoardExceedRequiredHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoardExceedRequiredHours1OperationCompleted;
        
        private System.Threading.SendOrPostCallback P2LStatusUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchCompleteProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModelNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkUSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkUSN1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkUSNAndMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadUSNItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebServiceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebServiceConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabelJobSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckHoldOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitExceedRequiredTimesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompareSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUPNWeightToleranceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSOGenealogyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateLotNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateLotNoByMOOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPrimaryComponentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLightForUnitOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLightForComponentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLightsForUnitPTLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLightsForComponentPTLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLightForComponent_SingleShotOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMOFirstPickOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDSIReadinessCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPalletTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckNewSKUHoldOperationCompleted;
        
        private System.Threading.SendOrPostCallback NeedEngraveOperationCompleted;
        
        private System.Threading.SendOrPostCallback EngraveFinishOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSandraDSJOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSandraDSJOBSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckHipotOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::GetBarcodeServer.Properties.Settings.Default.GetBarcodeServer_FA_Basic_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckSFCDLSkillCompletedEventHandler CheckSFCDLSkillCompleted;
        
        /// <remarks/>
        public event CheckATAndTUnitCompletedEventHandler CheckATAndTUnitCompleted;
        
        /// <remarks/>
        public event CheckNoTouchLabelUnitCompletedEventHandler CheckNoTouchLabelUnitCompleted;
        
        /// <remarks/>
        public event RecordMOPickTimeCompletedEventHandler RecordMOPickTimeCompleted;
        
        /// <remarks/>
        public event CheckRepairZoneRestrictionCompletedEventHandler CheckRepairZoneRestrictionCompleted;
        
        /// <remarks/>
        public event BarcodeVerifyByMOCompletedEventHandler BarcodeVerifyByMOCompleted;
        
        /// <remarks/>
        public event ProcessAutoSwapCompletedEventHandler ProcessAutoSwapCompleted;
        
        /// <remarks/>
        public event ProcessAutoSwapForCFICompletedEventHandler ProcessAutoSwapForCFICompleted;
        
        /// <remarks/>
        public event AssignTempLocationCompletedEventHandler AssignTempLocationCompleted;
        
        /// <remarks/>
        public event ReleaseTempLocationCompletedEventHandler ReleaseTempLocationCompleted;
        
        /// <remarks/>
        public event SetLightsForOffLineKTLCompletedEventHandler SetLightsForOffLineKTLCompleted;
        
        /// <remarks/>
        public event CheckOffLineSoftwareRackDataCompletedEventHandler CheckOffLineSoftwareRackDataCompleted;
        
        /// <remarks/>
        public event CheckMandatoryDataCompletedEventHandler CheckMandatoryDataCompleted;
        
        /// <remarks/>
        public event RaisePackRackRequestCompletedEventHandler RaisePackRackRequestCompleted;
        
        /// <remarks/>
        public event AssignIDByUSNCompletedEventHandler AssignIDByUSNCompleted;
        
        /// <remarks/>
        public event UploadTrnStartDateCompletedEventHandler UploadTrnStartDateCompleted;
        
        /// <remarks/>
        public event UploadTrnStartDate1CompletedEventHandler UploadTrnStartDate1Completed;
        
        /// <remarks/>
        public event GetUSNHighestGroupSeqCompletedEventHandler GetUSNHighestGroupSeqCompleted;
        
        /// <remarks/>
        public event RefreshAssemblyGroupSEQCompletedEventHandler RefreshAssemblyGroupSEQCompleted;
        
        /// <remarks/>
        public event GetWorkStationGenealogyCompletedEventHandler GetWorkStationGenealogyCompleted;
        
        /// <remarks/>
        public event GetApplicationIniCompletedEventHandler GetApplicationIniCompleted;
        
        /// <remarks/>
        public event SetApplicationIniCompletedEventHandler SetApplicationIniCompleted;
        
        /// <remarks/>
        public event GetUserinformationCompletedEventHandler GetUserinformationCompleted;
        
        /// <remarks/>
        public event GetMoGenealogyCompletedEventHandler GetMoGenealogyCompleted;
        
        /// <remarks/>
        public event GetUsnGenealogyCompletedEventHandler GetUsnGenealogyCompleted;
        
        /// <remarks/>
        public event ApproveProcessStartCompletedEventHandler ApproveProcessStartCompleted;
        
        /// <remarks/>
        public event CompleteProcessCompletedEventHandler CompleteProcessCompleted;
        
        /// <remarks/>
        public event CompleteRepairCompletedEventHandler CompleteRepairCompleted;
        
        /// <remarks/>
        public event CheckInCompletedEventHandler CheckInCompleted;
        
        /// <remarks/>
        public event CheckOutCompletedEventHandler CheckOutCompleted;
        
        /// <remarks/>
        public event CheckIn1CompletedEventHandler CheckIn1Completed;
        
        /// <remarks/>
        public event CheckOut1CompletedEventHandler CheckOut1Completed;
        
        /// <remarks/>
        public event BarcodeValidationCompletedEventHandler BarcodeValidationCompleted;
        
        /// <remarks/>
        public event GetESOPCompletedEventHandler GetESOPCompleted;
        
        /// <remarks/>
        public event GetESOP1CompletedEventHandler GetESOP1Completed;
        
        /// <remarks/>
        public event RequestLabelPrintCompletedEventHandler RequestLabelPrintCompleted;
        
        /// <remarks/>
        public event RequestLabelPrintForP2LCompletedEventHandler RequestLabelPrintForP2LCompleted;
        
        /// <remarks/>
        public event PrintUnitLabelByP2LRackCompletedEventHandler PrintUnitLabelByP2LRackCompleted;
        
        /// <remarks/>
        public event GetMessageCompletedEventHandler GetMessageCompleted;
        
        /// <remarks/>
        public event GetUSNDefectCompletedEventHandler GetUSNDefectCompleted;
        
        /// <remarks/>
        public event IsCPNCompleteCompletedEventHandler IsCPNCompleteCompleted;
        
        /// <remarks/>
        public event GetNextCPNCompletedEventHandler GetNextCPNCompleted;
        
        /// <remarks/>
        public event GetNextCPN1CompletedEventHandler GetNextCPN1Completed;
        
        /// <remarks/>
        public event ChkRouteCompletedEventHandler ChkRouteCompleted;
        
        /// <remarks/>
        public event CompleteCompletedEventHandler CompleteCompleted;
        
        /// <remarks/>
        public event CheckSamplingCompletedEventHandler CheckSamplingCompleted;
        
        /// <remarks/>
        public event GetPackageItemCompletedEventHandler GetPackageItemCompleted;
        
        /// <remarks/>
        public event GetUPNPackageCompletedEventHandler GetUPNPackageCompleted;
        
        /// <remarks/>
        public event GetUPNPackage1CompletedEventHandler GetUPNPackage1Completed;
        
        /// <remarks/>
        public event GeneratePackageIDCompletedEventHandler GeneratePackageIDCompleted;
        
        /// <remarks/>
        public event GeneratePackageID1CompletedEventHandler GeneratePackageID1Completed;
        
        /// <remarks/>
        public event UploadMACCompletedEventHandler UploadMACCompleted;
        
        /// <remarks/>
        public event GetSamplingCompletedEventHandler GetSamplingCompleted;
        
        /// <remarks/>
        public event GetNextStageCompletedEventHandler GetNextStageCompleted;
        
        /// <remarks/>
        public event SetCOACompletedEventHandler SetCOACompleted;
        
        /// <remarks/>
        public event GetMACCompletedEventHandler GetMACCompleted;
        
        /// <remarks/>
        public event GetMACOUICompletedEventHandler GetMACOUICompleted;
        
        /// <remarks/>
        public event IsRoHSItemCompletedEventHandler IsRoHSItemCompleted;
        
        /// <remarks/>
        public event VerifyRoHSPairCompletedEventHandler VerifyRoHSPairCompleted;
        
        /// <remarks/>
        public event VerifyRoHSPair1CompletedEventHandler VerifyRoHSPair1Completed;
        
        /// <remarks/>
        public event GetGPInforCompletedEventHandler GetGPInforCompleted;
        
        /// <remarks/>
        public event GetItemValueCompletedEventHandler GetItemValueCompleted;
        
        /// <remarks/>
        public event HoldOperationCompletedEventHandler HoldOperationCompleted;
        
        /// <remarks/>
        public event ReleaseOperationCompletedEventHandler ReleaseOperationCompleted;
        
        /// <remarks/>
        public event BoardExceedRequiredHoursCompletedEventHandler BoardExceedRequiredHoursCompleted;
        
        /// <remarks/>
        public event BoardExceedRequiredHours1CompletedEventHandler BoardExceedRequiredHours1Completed;
        
        /// <remarks/>
        public event P2LStatusUpdateCompletedEventHandler P2LStatusUpdateCompleted;
        
        /// <remarks/>
        public event GetPackageIDCompletedEventHandler GetPackageIDCompleted;
        
        /// <remarks/>
        public event GetUSNItemCompletedEventHandler GetUSNItemCompleted;
        
        /// <remarks/>
        public event BatchCompleteProcessCompletedEventHandler BatchCompleteProcessCompleted;
        
        /// <remarks/>
        public event GetModelNameCompletedEventHandler GetModelNameCompleted;
        
        /// <remarks/>
        public event GetLinkUSNCompletedEventHandler GetLinkUSNCompleted;
        
        /// <remarks/>
        public event GetLinkUSN1CompletedEventHandler GetLinkUSN1Completed;
        
        /// <remarks/>
        public event GetLinkUSNAndMessageCompletedEventHandler GetLinkUSNAndMessageCompleted;
        
        /// <remarks/>
        public event GetUSNIDCompletedEventHandler GetUSNIDCompleted;
        
        /// <remarks/>
        public event UploadUSNItemCompletedEventHandler UploadUSNItemCompleted;
        
        /// <remarks/>
        public event GetWebServiceInfoCompletedEventHandler GetWebServiceInfoCompleted;
        
        /// <remarks/>
        public event GetWebServiceConfigCompletedEventHandler GetWebServiceConfigCompleted;
        
        /// <remarks/>
        public event GetLabelJobSettingCompletedEventHandler GetLabelJobSettingCompleted;
        
        /// <remarks/>
        public event CheckHoldCompletedEventHandler CheckHoldCompleted;
        
        /// <remarks/>
        public event UnitExceedRequiredTimesCompletedEventHandler UnitExceedRequiredTimesCompleted;
        
        /// <remarks/>
        public event GetCompareSettingCompletedEventHandler GetCompareSettingCompleted;
        
        /// <remarks/>
        public event GetUPNWeightToleranceCompletedEventHandler GetUPNWeightToleranceCompleted;
        
        /// <remarks/>
        public event GetSOGenealogyCompletedEventHandler GetSOGenealogyCompleted;
        
        /// <remarks/>
        public event GenerateLotNoCompletedEventHandler GenerateLotNoCompleted;
        
        /// <remarks/>
        public event GenerateLotNoByMOCompletedEventHandler GenerateLotNoByMOCompleted;
        
        /// <remarks/>
        public event CheckPrimaryComponentCompletedEventHandler CheckPrimaryComponentCompleted;
        
        /// <remarks/>
        public event SetLightForUnitCompletedEventHandler SetLightForUnitCompleted;
        
        /// <remarks/>
        public event SetLightForComponentCompletedEventHandler SetLightForComponentCompleted;
        
        /// <remarks/>
        public event SetLightsForUnitPTLCompletedEventHandler SetLightsForUnitPTLCompleted;
        
        /// <remarks/>
        public event SetLightsForComponentPTLCompletedEventHandler SetLightsForComponentPTLCompleted;
        
        /// <remarks/>
        public event SetLightForComponent_SingleShotCompletedEventHandler SetLightForComponent_SingleShotCompleted;
        
        /// <remarks/>
        public event AddMOFirstPickCompletedEventHandler AddMOFirstPickCompleted;
        
        /// <remarks/>
        public event CDSIReadinessCheckCompletedEventHandler CDSIReadinessCheckCompleted;
        
        /// <remarks/>
        public event GetPalletTypeCompletedEventHandler GetPalletTypeCompleted;
        
        /// <remarks/>
        public event CheckNewSKUHoldCompletedEventHandler CheckNewSKUHoldCompleted;
        
        /// <remarks/>
        public event NeedEngraveCompletedEventHandler NeedEngraveCompleted;
        
        /// <remarks/>
        public event EngraveFinishCompletedEventHandler EngraveFinishCompleted;
        
        /// <remarks/>
        public event InsertSandraDSJOBCompletedEventHandler InsertSandraDSJOBCompleted;
        
        /// <remarks/>
        public event InsertSandraDSJOBSqlCompletedEventHandler InsertSandraDSJOBSqlCompleted;
        
        /// <remarks/>
        public event CheckHipotCompletedEventHandler CheckHipotCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckSFCDLSkill", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSFCDLSkill(clsDLSkill DLSkill, ref string Message) {
            object[] results = this.Invoke("CheckSFCDLSkill", new object[] {
                        DLSkill,
                        Message});
            Message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSFCDLSkillAsync(clsDLSkill DLSkill, string Message) {
            this.CheckSFCDLSkillAsync(DLSkill, Message, null);
        }
        
        /// <remarks/>
        public void CheckSFCDLSkillAsync(clsDLSkill DLSkill, string Message, object userState) {
            if ((this.CheckSFCDLSkillOperationCompleted == null)) {
                this.CheckSFCDLSkillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSFCDLSkillOperationCompleted);
            }
            this.InvokeAsync("CheckSFCDLSkill", new object[] {
                        DLSkill,
                        Message}, this.CheckSFCDLSkillOperationCompleted, userState);
        }
        
        private void OnCheckSFCDLSkillOperationCompleted(object arg) {
            if ((this.CheckSFCDLSkillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSFCDLSkillCompleted(this, new CheckSFCDLSkillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckATAndTUnit", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckATAndTUnit(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckATAndTUnit", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckATAndTUnitAsync(string UnitSerialNumber, string StageCode) {
            this.CheckATAndTUnitAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckATAndTUnitAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckATAndTUnitOperationCompleted == null)) {
                this.CheckATAndTUnitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckATAndTUnitOperationCompleted);
            }
            this.InvokeAsync("CheckATAndTUnit", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckATAndTUnitOperationCompleted, userState);
        }
        
        private void OnCheckATAndTUnitOperationCompleted(object arg) {
            if ((this.CheckATAndTUnitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckATAndTUnitCompleted(this, new CheckATAndTUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckNoTouchLabelUnit", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckNoTouchLabelUnit(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckNoTouchLabelUnit", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckNoTouchLabelUnitAsync(string UnitSerialNumber, string StageCode) {
            this.CheckNoTouchLabelUnitAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckNoTouchLabelUnitAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckNoTouchLabelUnitOperationCompleted == null)) {
                this.CheckNoTouchLabelUnitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckNoTouchLabelUnitOperationCompleted);
            }
            this.InvokeAsync("CheckNoTouchLabelUnit", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckNoTouchLabelUnitOperationCompleted, userState);
        }
        
        private void OnCheckNoTouchLabelUnitOperationCompleted(object arg) {
            if ((this.CheckNoTouchLabelUnitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckNoTouchLabelUnitCompleted(this, new CheckNoTouchLabelUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/RecordMOPickTime", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RecordMOPickTime(string ManufactureOrder, string StageCode) {
            object[] results = this.Invoke("RecordMOPickTime", new object[] {
                        ManufactureOrder,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RecordMOPickTimeAsync(string ManufactureOrder, string StageCode) {
            this.RecordMOPickTimeAsync(ManufactureOrder, StageCode, null);
        }
        
        /// <remarks/>
        public void RecordMOPickTimeAsync(string ManufactureOrder, string StageCode, object userState) {
            if ((this.RecordMOPickTimeOperationCompleted == null)) {
                this.RecordMOPickTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordMOPickTimeOperationCompleted);
            }
            this.InvokeAsync("RecordMOPickTime", new object[] {
                        ManufactureOrder,
                        StageCode}, this.RecordMOPickTimeOperationCompleted, userState);
        }
        
        private void OnRecordMOPickTimeOperationCompleted(object arg) {
            if ((this.RecordMOPickTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordMOPickTimeCompleted(this, new RecordMOPickTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckRepairZoneRestriction", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRepairZoneRestriction(string UnitSerialNumber, string StageCode, string Location, string CheckMode) {
            object[] results = this.Invoke("CheckRepairZoneRestriction", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Location,
                        CheckMode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRepairZoneRestrictionAsync(string UnitSerialNumber, string StageCode, string Location, string CheckMode) {
            this.CheckRepairZoneRestrictionAsync(UnitSerialNumber, StageCode, Location, CheckMode, null);
        }
        
        /// <remarks/>
        public void CheckRepairZoneRestrictionAsync(string UnitSerialNumber, string StageCode, string Location, string CheckMode, object userState) {
            if ((this.CheckRepairZoneRestrictionOperationCompleted == null)) {
                this.CheckRepairZoneRestrictionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRepairZoneRestrictionOperationCompleted);
            }
            this.InvokeAsync("CheckRepairZoneRestriction", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Location,
                        CheckMode}, this.CheckRepairZoneRestrictionOperationCompleted, userState);
        }
        
        private void OnCheckRepairZoneRestrictionOperationCompleted(object arg) {
            if ((this.CheckRepairZoneRestrictionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRepairZoneRestrictionCompleted(this, new CheckRepairZoneRestrictionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/BarcodeVerifyByMO", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BarcodeVerifyByMO(string StageCode, string WorkingPalletID, string Barcode1, string ManufactureOrder, clsBarcodeValidateCheckFlag BarcodeValidateCheckFlag) {
            object[] results = this.Invoke("BarcodeVerifyByMO", new object[] {
                        StageCode,
                        WorkingPalletID,
                        Barcode1,
                        ManufactureOrder,
                        BarcodeValidateCheckFlag});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BarcodeVerifyByMOAsync(string StageCode, string WorkingPalletID, string Barcode1, string ManufactureOrder, clsBarcodeValidateCheckFlag BarcodeValidateCheckFlag) {
            this.BarcodeVerifyByMOAsync(StageCode, WorkingPalletID, Barcode1, ManufactureOrder, BarcodeValidateCheckFlag, null);
        }
        
        /// <remarks/>
        public void BarcodeVerifyByMOAsync(string StageCode, string WorkingPalletID, string Barcode1, string ManufactureOrder, clsBarcodeValidateCheckFlag BarcodeValidateCheckFlag, object userState) {
            if ((this.BarcodeVerifyByMOOperationCompleted == null)) {
                this.BarcodeVerifyByMOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBarcodeVerifyByMOOperationCompleted);
            }
            this.InvokeAsync("BarcodeVerifyByMO", new object[] {
                        StageCode,
                        WorkingPalletID,
                        Barcode1,
                        ManufactureOrder,
                        BarcodeValidateCheckFlag}, this.BarcodeVerifyByMOOperationCompleted, userState);
        }
        
        private void OnBarcodeVerifyByMOOperationCompleted(object arg) {
            if ((this.BarcodeVerifyByMOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BarcodeVerifyByMOCompleted(this, new BarcodeVerifyByMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/ProcessAutoSwap", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsAutoSwapResult ProcessAutoSwap(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("ProcessAutoSwap", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsAutoSwapResult)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAutoSwapAsync(string UnitSerialNumber, string StageCode) {
            this.ProcessAutoSwapAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void ProcessAutoSwapAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.ProcessAutoSwapOperationCompleted == null)) {
                this.ProcessAutoSwapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAutoSwapOperationCompleted);
            }
            this.InvokeAsync("ProcessAutoSwap", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.ProcessAutoSwapOperationCompleted, userState);
        }
        
        private void OnProcessAutoSwapOperationCompleted(object arg) {
            if ((this.ProcessAutoSwapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAutoSwapCompleted(this, new ProcessAutoSwapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/ProcessAutoSwapForCFI", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsAutoSwapResult ProcessAutoSwapForCFI(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("ProcessAutoSwapForCFI", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsAutoSwapResult)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAutoSwapForCFIAsync(string UnitSerialNumber, string StageCode) {
            this.ProcessAutoSwapForCFIAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void ProcessAutoSwapForCFIAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.ProcessAutoSwapForCFIOperationCompleted == null)) {
                this.ProcessAutoSwapForCFIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAutoSwapForCFIOperationCompleted);
            }
            this.InvokeAsync("ProcessAutoSwapForCFI", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.ProcessAutoSwapForCFIOperationCompleted, userState);
        }
        
        private void OnProcessAutoSwapForCFIOperationCompleted(object arg) {
            if ((this.ProcessAutoSwapForCFICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAutoSwapForCFICompleted(this, new ProcessAutoSwapForCFICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/AssignTempLocation", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsAssignTempLocResult AssignTempLocation(string CartonID, string StageCode, string Line, string WorkStation, clsAssignTempLocFlag AssignTempLocFlag) {
            object[] results = this.Invoke("AssignTempLocation", new object[] {
                        CartonID,
                        StageCode,
                        Line,
                        WorkStation,
                        AssignTempLocFlag});
            return ((clsAssignTempLocResult)(results[0]));
        }
        
        /// <remarks/>
        public void AssignTempLocationAsync(string CartonID, string StageCode, string Line, string WorkStation, clsAssignTempLocFlag AssignTempLocFlag) {
            this.AssignTempLocationAsync(CartonID, StageCode, Line, WorkStation, AssignTempLocFlag, null);
        }
        
        /// <remarks/>
        public void AssignTempLocationAsync(string CartonID, string StageCode, string Line, string WorkStation, clsAssignTempLocFlag AssignTempLocFlag, object userState) {
            if ((this.AssignTempLocationOperationCompleted == null)) {
                this.AssignTempLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignTempLocationOperationCompleted);
            }
            this.InvokeAsync("AssignTempLocation", new object[] {
                        CartonID,
                        StageCode,
                        Line,
                        WorkStation,
                        AssignTempLocFlag}, this.AssignTempLocationOperationCompleted, userState);
        }
        
        private void OnAssignTempLocationOperationCompleted(object arg) {
            if ((this.AssignTempLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignTempLocationCompleted(this, new AssignTempLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/ReleaseTempLocation", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsProcessResult ReleaseTempLocation(string ReleaseKeyID, int ReleaseType, string StageCode) {
            object[] results = this.Invoke("ReleaseTempLocation", new object[] {
                        ReleaseKeyID,
                        ReleaseType,
                        StageCode});
            return ((clsProcessResult)(results[0]));
        }
        
        /// <remarks/>
        public void ReleaseTempLocationAsync(string ReleaseKeyID, int ReleaseType, string StageCode) {
            this.ReleaseTempLocationAsync(ReleaseKeyID, ReleaseType, StageCode, null);
        }
        
        /// <remarks/>
        public void ReleaseTempLocationAsync(string ReleaseKeyID, int ReleaseType, string StageCode, object userState) {
            if ((this.ReleaseTempLocationOperationCompleted == null)) {
                this.ReleaseTempLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseTempLocationOperationCompleted);
            }
            this.InvokeAsync("ReleaseTempLocation", new object[] {
                        ReleaseKeyID,
                        ReleaseType,
                        StageCode}, this.ReleaseTempLocationOperationCompleted, userState);
        }
        
        private void OnReleaseTempLocationOperationCompleted(object arg) {
            if ((this.ReleaseTempLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseTempLocationCompleted(this, new ReleaseTempLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetLightsForOffLineKTL", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetLightsForOffLineKTL(string StageCode, string Line, string WorkStation, int RackType, string ComponentPN, string UnitSerialNumber, string Category) {
            object[] results = this.Invoke("SetLightsForOffLineKTL", new object[] {
                        StageCode,
                        Line,
                        WorkStation,
                        RackType,
                        ComponentPN,
                        UnitSerialNumber,
                        Category});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetLightsForOffLineKTLAsync(string StageCode, string Line, string WorkStation, int RackType, string ComponentPN, string UnitSerialNumber, string Category) {
            this.SetLightsForOffLineKTLAsync(StageCode, Line, WorkStation, RackType, ComponentPN, UnitSerialNumber, Category, null);
        }
        
        /// <remarks/>
        public void SetLightsForOffLineKTLAsync(string StageCode, string Line, string WorkStation, int RackType, string ComponentPN, string UnitSerialNumber, string Category, object userState) {
            if ((this.SetLightsForOffLineKTLOperationCompleted == null)) {
                this.SetLightsForOffLineKTLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLightsForOffLineKTLOperationCompleted);
            }
            this.InvokeAsync("SetLightsForOffLineKTL", new object[] {
                        StageCode,
                        Line,
                        WorkStation,
                        RackType,
                        ComponentPN,
                        UnitSerialNumber,
                        Category}, this.SetLightsForOffLineKTLOperationCompleted, userState);
        }
        
        private void OnSetLightsForOffLineKTLOperationCompleted(object arg) {
            if ((this.SetLightsForOffLineKTLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLightsForOffLineKTLCompleted(this, new SetLightsForOffLineKTLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckOffLineSoftwareRackData", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckOffLineSoftwareRackData(string StageCode, string Line, string WorkStation, int RackType, string ModelFamily, string ComponentPN) {
            object[] results = this.Invoke("CheckOffLineSoftwareRackData", new object[] {
                        StageCode,
                        Line,
                        WorkStation,
                        RackType,
                        ModelFamily,
                        ComponentPN});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOffLineSoftwareRackDataAsync(string StageCode, string Line, string WorkStation, int RackType, string ModelFamily, string ComponentPN) {
            this.CheckOffLineSoftwareRackDataAsync(StageCode, Line, WorkStation, RackType, ModelFamily, ComponentPN, null);
        }
        
        /// <remarks/>
        public void CheckOffLineSoftwareRackDataAsync(string StageCode, string Line, string WorkStation, int RackType, string ModelFamily, string ComponentPN, object userState) {
            if ((this.CheckOffLineSoftwareRackDataOperationCompleted == null)) {
                this.CheckOffLineSoftwareRackDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOffLineSoftwareRackDataOperationCompleted);
            }
            this.InvokeAsync("CheckOffLineSoftwareRackData", new object[] {
                        StageCode,
                        Line,
                        WorkStation,
                        RackType,
                        ModelFamily,
                        ComponentPN}, this.CheckOffLineSoftwareRackDataOperationCompleted, userState);
        }
        
        private void OnCheckOffLineSoftwareRackDataOperationCompleted(object arg) {
            if ((this.CheckOffLineSoftwareRackDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOffLineSoftwareRackDataCompleted(this, new CheckOffLineSoftwareRackDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckMandatoryData", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckMandatoryData(string UnitSerialNumber, string ManufactureOrder, string UnitPartNumber, string ModelFamily, string SO, string SOLine, string StageCode, string WorkStation, string UserID, string APID, string MandatoryCheckString, int CheckTime) {
            object[] results = this.Invoke("CheckMandatoryData", new object[] {
                        UnitSerialNumber,
                        ManufactureOrder,
                        UnitPartNumber,
                        ModelFamily,
                        SO,
                        SOLine,
                        StageCode,
                        WorkStation,
                        UserID,
                        APID,
                        MandatoryCheckString,
                        CheckTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckMandatoryDataAsync(string UnitSerialNumber, string ManufactureOrder, string UnitPartNumber, string ModelFamily, string SO, string SOLine, string StageCode, string WorkStation, string UserID, string APID, string MandatoryCheckString, int CheckTime) {
            this.CheckMandatoryDataAsync(UnitSerialNumber, ManufactureOrder, UnitPartNumber, ModelFamily, SO, SOLine, StageCode, WorkStation, UserID, APID, MandatoryCheckString, CheckTime, null);
        }
        
        /// <remarks/>
        public void CheckMandatoryDataAsync(string UnitSerialNumber, string ManufactureOrder, string UnitPartNumber, string ModelFamily, string SO, string SOLine, string StageCode, string WorkStation, string UserID, string APID, string MandatoryCheckString, int CheckTime, object userState) {
            if ((this.CheckMandatoryDataOperationCompleted == null)) {
                this.CheckMandatoryDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMandatoryDataOperationCompleted);
            }
            this.InvokeAsync("CheckMandatoryData", new object[] {
                        UnitSerialNumber,
                        ManufactureOrder,
                        UnitPartNumber,
                        ModelFamily,
                        SO,
                        SOLine,
                        StageCode,
                        WorkStation,
                        UserID,
                        APID,
                        MandatoryCheckString,
                        CheckTime}, this.CheckMandatoryDataOperationCompleted, userState);
        }
        
        private void OnCheckMandatoryDataOperationCompleted(object arg) {
            if ((this.CheckMandatoryDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMandatoryDataCompleted(this, new CheckMandatoryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/RaisePackRackRequest", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RaisePackRackRequest(ref clsPackRackUnit pPackRackUnit, string pstrStageCode, PackRackActionType pActionType) {
            object[] results = this.Invoke("RaisePackRackRequest", new object[] {
                        pPackRackUnit,
                        pstrStageCode,
                        pActionType});
            pPackRackUnit = ((clsPackRackUnit)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RaisePackRackRequestAsync(clsPackRackUnit pPackRackUnit, string pstrStageCode, PackRackActionType pActionType) {
            this.RaisePackRackRequestAsync(pPackRackUnit, pstrStageCode, pActionType, null);
        }
        
        /// <remarks/>
        public void RaisePackRackRequestAsync(clsPackRackUnit pPackRackUnit, string pstrStageCode, PackRackActionType pActionType, object userState) {
            if ((this.RaisePackRackRequestOperationCompleted == null)) {
                this.RaisePackRackRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRaisePackRackRequestOperationCompleted);
            }
            this.InvokeAsync("RaisePackRackRequest", new object[] {
                        pPackRackUnit,
                        pstrStageCode,
                        pActionType}, this.RaisePackRackRequestOperationCompleted, userState);
        }
        
        private void OnRaisePackRackRequestOperationCompleted(object arg) {
            if ((this.RaisePackRackRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RaisePackRackRequestCompleted(this, new RaisePackRackRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/AssignIDByUSN", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AssignIDByUSN(string pUSN, int pIDType) {
            object[] results = this.Invoke("AssignIDByUSN", new object[] {
                        pUSN,
                        pIDType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AssignIDByUSNAsync(string pUSN, int pIDType) {
            this.AssignIDByUSNAsync(pUSN, pIDType, null);
        }
        
        /// <remarks/>
        public void AssignIDByUSNAsync(string pUSN, int pIDType, object userState) {
            if ((this.AssignIDByUSNOperationCompleted == null)) {
                this.AssignIDByUSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignIDByUSNOperationCompleted);
            }
            this.InvokeAsync("AssignIDByUSN", new object[] {
                        pUSN,
                        pIDType}, this.AssignIDByUSNOperationCompleted, userState);
        }
        
        private void OnAssignIDByUSNOperationCompleted(object arg) {
            if ((this.AssignIDByUSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignIDByUSNCompleted(this, new AssignIDByUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/UploadTrnStartDate", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTrnStartDate(string UnitSerialNumber, string StageCode, string UserID, string WorkStation) {
            object[] results = this.Invoke("UploadTrnStartDate", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID,
                        WorkStation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTrnStartDateAsync(string UnitSerialNumber, string StageCode, string UserID, string WorkStation) {
            this.UploadTrnStartDateAsync(UnitSerialNumber, StageCode, UserID, WorkStation, null);
        }
        
        /// <remarks/>
        public void UploadTrnStartDateAsync(string UnitSerialNumber, string StageCode, string UserID, string WorkStation, object userState) {
            if ((this.UploadTrnStartDateOperationCompleted == null)) {
                this.UploadTrnStartDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTrnStartDateOperationCompleted);
            }
            this.InvokeAsync("UploadTrnStartDate", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID,
                        WorkStation}, this.UploadTrnStartDateOperationCompleted, userState);
        }
        
        private void OnUploadTrnStartDateOperationCompleted(object arg) {
            if ((this.UploadTrnStartDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTrnStartDateCompleted(this, new UploadTrnStartDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadTrnStartDate1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/UploadTrnStartDatewithTrnStartDate", RequestElementName="UploadTrnStartDatewithTrnStartDate", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="UploadTrnStartDatewithTrnStartDateResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UploadTrnStartDatewithTrnStartDateResult")]
        public string UploadTrnStartDate(string UnitSerialNumber, string StageCode, string UserID, string WorkStation, string TrnStartDate) {
            object[] results = this.Invoke("UploadTrnStartDate1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID,
                        WorkStation,
                        TrnStartDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTrnStartDate1Async(string UnitSerialNumber, string StageCode, string UserID, string WorkStation, string TrnStartDate) {
            this.UploadTrnStartDate1Async(UnitSerialNumber, StageCode, UserID, WorkStation, TrnStartDate, null);
        }
        
        /// <remarks/>
        public void UploadTrnStartDate1Async(string UnitSerialNumber, string StageCode, string UserID, string WorkStation, string TrnStartDate, object userState) {
            if ((this.UploadTrnStartDate1OperationCompleted == null)) {
                this.UploadTrnStartDate1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTrnStartDate1OperationCompleted);
            }
            this.InvokeAsync("UploadTrnStartDate1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID,
                        WorkStation,
                        TrnStartDate}, this.UploadTrnStartDate1OperationCompleted, userState);
        }
        
        private void OnUploadTrnStartDate1OperationCompleted(object arg) {
            if ((this.UploadTrnStartDate1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTrnStartDate1Completed(this, new UploadTrnStartDate1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUSNHighestGroupSeq", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUSNHighestGroupSeq(string UnitSerialNumber, string ManufactureOrder, string UnitPartNumber, string ModelFamily, string StageCode) {
            object[] results = this.Invoke("GetUSNHighestGroupSeq", new object[] {
                        UnitSerialNumber,
                        ManufactureOrder,
                        UnitPartNumber,
                        ModelFamily,
                        StageCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNHighestGroupSeqAsync(string UnitSerialNumber, string ManufactureOrder, string UnitPartNumber, string ModelFamily, string StageCode) {
            this.GetUSNHighestGroupSeqAsync(UnitSerialNumber, ManufactureOrder, UnitPartNumber, ModelFamily, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUSNHighestGroupSeqAsync(string UnitSerialNumber, string ManufactureOrder, string UnitPartNumber, string ModelFamily, string StageCode, object userState) {
            if ((this.GetUSNHighestGroupSeqOperationCompleted == null)) {
                this.GetUSNHighestGroupSeqOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNHighestGroupSeqOperationCompleted);
            }
            this.InvokeAsync("GetUSNHighestGroupSeq", new object[] {
                        UnitSerialNumber,
                        ManufactureOrder,
                        UnitPartNumber,
                        ModelFamily,
                        StageCode}, this.GetUSNHighestGroupSeqOperationCompleted, userState);
        }
        
        private void OnGetUSNHighestGroupSeqOperationCompleted(object arg) {
            if ((this.GetUSNHighestGroupSeqCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNHighestGroupSeqCompleted(this, new GetUSNHighestGroupSeqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/RefreshAssemblyGroupSEQ", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RefreshAssemblyGroupSEQ(string MO, string StageCode) {
            object[] results = this.Invoke("RefreshAssemblyGroupSEQ", new object[] {
                        MO,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RefreshAssemblyGroupSEQAsync(string MO, string StageCode) {
            this.RefreshAssemblyGroupSEQAsync(MO, StageCode, null);
        }
        
        /// <remarks/>
        public void RefreshAssemblyGroupSEQAsync(string MO, string StageCode, object userState) {
            if ((this.RefreshAssemblyGroupSEQOperationCompleted == null)) {
                this.RefreshAssemblyGroupSEQOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshAssemblyGroupSEQOperationCompleted);
            }
            this.InvokeAsync("RefreshAssemblyGroupSEQ", new object[] {
                        MO,
                        StageCode}, this.RefreshAssemblyGroupSEQOperationCompleted, userState);
        }
        
        private void OnRefreshAssemblyGroupSEQOperationCompleted(object arg) {
            if ((this.RefreshAssemblyGroupSEQCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshAssemblyGroupSEQCompleted(this, new RefreshAssemblyGroupSEQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetWorkStationGenealogy", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsWorkStation[] GetWorkStationGenealogy(string WorkStationIP, string ApplicationID) {
            object[] results = this.Invoke("GetWorkStationGenealogy", new object[] {
                        WorkStationIP,
                        ApplicationID});
            return ((clsWorkStation[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkStationGenealogyAsync(string WorkStationIP, string ApplicationID) {
            this.GetWorkStationGenealogyAsync(WorkStationIP, ApplicationID, null);
        }
        
        /// <remarks/>
        public void GetWorkStationGenealogyAsync(string WorkStationIP, string ApplicationID, object userState) {
            if ((this.GetWorkStationGenealogyOperationCompleted == null)) {
                this.GetWorkStationGenealogyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkStationGenealogyOperationCompleted);
            }
            this.InvokeAsync("GetWorkStationGenealogy", new object[] {
                        WorkStationIP,
                        ApplicationID}, this.GetWorkStationGenealogyOperationCompleted, userState);
        }
        
        private void OnGetWorkStationGenealogyOperationCompleted(object arg) {
            if ((this.GetWorkStationGenealogyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkStationGenealogyCompleted(this, new GetWorkStationGenealogyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetApplicationIni", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsAppIni GetApplicationIni(string WorkStation, string ApplicationID, string ApplicationVersion) {
            object[] results = this.Invoke("GetApplicationIni", new object[] {
                        WorkStation,
                        ApplicationID,
                        ApplicationVersion});
            return ((clsAppIni)(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationIniAsync(string WorkStation, string ApplicationID, string ApplicationVersion) {
            this.GetApplicationIniAsync(WorkStation, ApplicationID, ApplicationVersion, null);
        }
        
        /// <remarks/>
        public void GetApplicationIniAsync(string WorkStation, string ApplicationID, string ApplicationVersion, object userState) {
            if ((this.GetApplicationIniOperationCompleted == null)) {
                this.GetApplicationIniOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationIniOperationCompleted);
            }
            this.InvokeAsync("GetApplicationIni", new object[] {
                        WorkStation,
                        ApplicationID,
                        ApplicationVersion}, this.GetApplicationIniOperationCompleted, userState);
        }
        
        private void OnGetApplicationIniOperationCompleted(object arg) {
            if ((this.GetApplicationIniCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationIniCompleted(this, new GetApplicationIniCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetApplicationIni", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetApplicationIni(string WorkStation, string ApplicationID, string ApplicationVersion, clsAppIni ApplicationIni) {
            this.Invoke("SetApplicationIni", new object[] {
                        WorkStation,
                        ApplicationID,
                        ApplicationVersion,
                        ApplicationIni});
        }
        
        /// <remarks/>
        public void SetApplicationIniAsync(string WorkStation, string ApplicationID, string ApplicationVersion, clsAppIni ApplicationIni) {
            this.SetApplicationIniAsync(WorkStation, ApplicationID, ApplicationVersion, ApplicationIni, null);
        }
        
        /// <remarks/>
        public void SetApplicationIniAsync(string WorkStation, string ApplicationID, string ApplicationVersion, clsAppIni ApplicationIni, object userState) {
            if ((this.SetApplicationIniOperationCompleted == null)) {
                this.SetApplicationIniOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationIniOperationCompleted);
            }
            this.InvokeAsync("SetApplicationIni", new object[] {
                        WorkStation,
                        ApplicationID,
                        ApplicationVersion,
                        ApplicationIni}, this.SetApplicationIniOperationCompleted, userState);
        }
        
        private void OnSetApplicationIniOperationCompleted(object arg) {
            if ((this.SetApplicationIniCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationIniCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUserinformation", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsUser GetUserinformation(string UserID, string Password, string ApplicationID) {
            object[] results = this.Invoke("GetUserinformation", new object[] {
                        UserID,
                        Password,
                        ApplicationID});
            return ((clsUser)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserinformationAsync(string UserID, string Password, string ApplicationID) {
            this.GetUserinformationAsync(UserID, Password, ApplicationID, null);
        }
        
        /// <remarks/>
        public void GetUserinformationAsync(string UserID, string Password, string ApplicationID, object userState) {
            if ((this.GetUserinformationOperationCompleted == null)) {
                this.GetUserinformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserinformationOperationCompleted);
            }
            this.InvokeAsync("GetUserinformation", new object[] {
                        UserID,
                        Password,
                        ApplicationID}, this.GetUserinformationOperationCompleted, userState);
        }
        
        private void OnGetUserinformationOperationCompleted(object arg) {
            if ((this.GetUserinformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserinformationCompleted(this, new GetUserinformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetMoGenealogy", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsMO GetMoGenealogy(string ManufactureOrder, string StageCode, clsMOCheckFlag MOCheckFlag) {
            object[] results = this.Invoke("GetMoGenealogy", new object[] {
                        ManufactureOrder,
                        StageCode,
                        MOCheckFlag});
            return ((clsMO)(results[0]));
        }
        
        /// <remarks/>
        public void GetMoGenealogyAsync(string ManufactureOrder, string StageCode, clsMOCheckFlag MOCheckFlag) {
            this.GetMoGenealogyAsync(ManufactureOrder, StageCode, MOCheckFlag, null);
        }
        
        /// <remarks/>
        public void GetMoGenealogyAsync(string ManufactureOrder, string StageCode, clsMOCheckFlag MOCheckFlag, object userState) {
            if ((this.GetMoGenealogyOperationCompleted == null)) {
                this.GetMoGenealogyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMoGenealogyOperationCompleted);
            }
            this.InvokeAsync("GetMoGenealogy", new object[] {
                        ManufactureOrder,
                        StageCode,
                        MOCheckFlag}, this.GetMoGenealogyOperationCompleted, userState);
        }
        
        private void OnGetMoGenealogyOperationCompleted(object arg) {
            if ((this.GetMoGenealogyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMoGenealogyCompleted(this, new GetMoGenealogyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUsnGenealogy", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsUSN GetUsnGenealogy(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetUsnGenealogy", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsUSN)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnGenealogyAsync(string UnitSerialNumber, string StageCode) {
            this.GetUsnGenealogyAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUsnGenealogyAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetUsnGenealogyOperationCompleted == null)) {
                this.GetUsnGenealogyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnGenealogyOperationCompleted);
            }
            this.InvokeAsync("GetUsnGenealogy", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetUsnGenealogyOperationCompleted, userState);
        }
        
        private void OnGetUsnGenealogyOperationCompleted(object arg) {
            if ((this.GetUsnGenealogyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnGenealogyCompleted(this, new GetUsnGenealogyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/ApproveProcessStart", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsProcessStartData ApproveProcessStart(string UnitSerialNumber, string StageCode, clsProcessStartCheckFlag ProcessStartCheckFlag) {
            object[] results = this.Invoke("ApproveProcessStart", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ProcessStartCheckFlag});
            return ((clsProcessStartData)(results[0]));
        }
        
        /// <remarks/>
        public void ApproveProcessStartAsync(string UnitSerialNumber, string StageCode, clsProcessStartCheckFlag ProcessStartCheckFlag) {
            this.ApproveProcessStartAsync(UnitSerialNumber, StageCode, ProcessStartCheckFlag, null);
        }
        
        /// <remarks/>
        public void ApproveProcessStartAsync(string UnitSerialNumber, string StageCode, clsProcessStartCheckFlag ProcessStartCheckFlag, object userState) {
            if ((this.ApproveProcessStartOperationCompleted == null)) {
                this.ApproveProcessStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveProcessStartOperationCompleted);
            }
            this.InvokeAsync("ApproveProcessStart", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ProcessStartCheckFlag}, this.ApproveProcessStartOperationCompleted, userState);
        }
        
        private void OnApproveProcessStartOperationCompleted(object arg) {
            if ((this.ApproveProcessStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveProcessStartCompleted(this, new ApproveProcessStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CompleteProcess", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CompleteProcess(string UnitSerialNumber, string StageCode, clsTransaction Transaction) {
            object[] results = this.Invoke("CompleteProcess", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Transaction});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteProcessAsync(string UnitSerialNumber, string StageCode, clsTransaction Transaction) {
            this.CompleteProcessAsync(UnitSerialNumber, StageCode, Transaction, null);
        }
        
        /// <remarks/>
        public void CompleteProcessAsync(string UnitSerialNumber, string StageCode, clsTransaction Transaction, object userState) {
            if ((this.CompleteProcessOperationCompleted == null)) {
                this.CompleteProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteProcessOperationCompleted);
            }
            this.InvokeAsync("CompleteProcess", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Transaction}, this.CompleteProcessOperationCompleted, userState);
        }
        
        private void OnCompleteProcessOperationCompleted(object arg) {
            if ((this.CompleteProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteProcessCompleted(this, new CompleteProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CompleteRepair", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CompleteRepair(string UnitSerialNumber, string StageCode, clsRepaireInformation RepairInformation) {
            object[] results = this.Invoke("CompleteRepair", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        RepairInformation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteRepairAsync(string UnitSerialNumber, string StageCode, clsRepaireInformation RepairInformation) {
            this.CompleteRepairAsync(UnitSerialNumber, StageCode, RepairInformation, null);
        }
        
        /// <remarks/>
        public void CompleteRepairAsync(string UnitSerialNumber, string StageCode, clsRepaireInformation RepairInformation, object userState) {
            if ((this.CompleteRepairOperationCompleted == null)) {
                this.CompleteRepairOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteRepairOperationCompleted);
            }
            this.InvokeAsync("CompleteRepair", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        RepairInformation}, this.CompleteRepairOperationCompleted, userState);
        }
        
        private void OnCompleteRepairOperationCompleted(object arg) {
            if ((this.CompleteRepairCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteRepairCompleted(this, new CompleteRepairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckIn", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIn(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckIn", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInAsync(string UnitSerialNumber, string StageCode) {
            this.CheckInAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckInAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckInOperationCompleted == null)) {
                this.CheckInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInOperationCompleted);
            }
            this.InvokeAsync("CheckIn", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckInOperationCompleted, userState);
        }
        
        private void OnCheckInOperationCompleted(object arg) {
            if ((this.CheckInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInCompleted(this, new CheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckOut", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckOut(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckOut", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOutAsync(string UnitSerialNumber, string StageCode) {
            this.CheckOutAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckOutAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckOutOperationCompleted == null)) {
                this.CheckOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutOperationCompleted);
            }
            this.InvokeAsync("CheckOut", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckOutOperationCompleted, userState);
        }
        
        private void OnCheckOutOperationCompleted(object arg) {
            if ((this.CheckOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutCompleted(this, new CheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="CheckIn1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckInByUser", RequestElementName="CheckInByUser", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="CheckInByUserResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CheckInByUserResult")]
        public bool CheckIn(string UnitSerialNumber, string StageCode, string UserID) {
            object[] results = this.Invoke("CheckIn1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIn1Async(string UnitSerialNumber, string StageCode, string UserID) {
            this.CheckIn1Async(UnitSerialNumber, StageCode, UserID, null);
        }
        
        /// <remarks/>
        public void CheckIn1Async(string UnitSerialNumber, string StageCode, string UserID, object userState) {
            if ((this.CheckIn1OperationCompleted == null)) {
                this.CheckIn1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIn1OperationCompleted);
            }
            this.InvokeAsync("CheckIn1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID}, this.CheckIn1OperationCompleted, userState);
        }
        
        private void OnCheckIn1OperationCompleted(object arg) {
            if ((this.CheckIn1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIn1Completed(this, new CheckIn1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="CheckOut1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckOutByUser", RequestElementName="CheckOutByUser", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="CheckOutByUserResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CheckOutByUserResult")]
        public bool CheckOut(string UnitSerialNumber, string StageCode, string UserID) {
            object[] results = this.Invoke("CheckOut1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOut1Async(string UnitSerialNumber, string StageCode, string UserID) {
            this.CheckOut1Async(UnitSerialNumber, StageCode, UserID, null);
        }
        
        /// <remarks/>
        public void CheckOut1Async(string UnitSerialNumber, string StageCode, string UserID, object userState) {
            if ((this.CheckOut1OperationCompleted == null)) {
                this.CheckOut1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOut1OperationCompleted);
            }
            this.InvokeAsync("CheckOut1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID}, this.CheckOut1OperationCompleted, userState);
        }
        
        private void OnCheckOut1OperationCompleted(object arg) {
            if ((this.CheckOut1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOut1Completed(this, new CheckOut1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/BarcodeValidation", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsBarcodeValidateResult BarcodeValidation(string UnitSerialNumber, string StageCode, string Barcode1, string Barcode2, clsBarcodeValidateCheckFlag BarcodeValidateCheckFlag) {
            object[] results = this.Invoke("BarcodeValidation", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Barcode1,
                        Barcode2,
                        BarcodeValidateCheckFlag});
            return ((clsBarcodeValidateResult)(results[0]));
        }
        
        /// <remarks/>
        public void BarcodeValidationAsync(string UnitSerialNumber, string StageCode, string Barcode1, string Barcode2, clsBarcodeValidateCheckFlag BarcodeValidateCheckFlag) {
            this.BarcodeValidationAsync(UnitSerialNumber, StageCode, Barcode1, Barcode2, BarcodeValidateCheckFlag, null);
        }
        
        /// <remarks/>
        public void BarcodeValidationAsync(string UnitSerialNumber, string StageCode, string Barcode1, string Barcode2, clsBarcodeValidateCheckFlag BarcodeValidateCheckFlag, object userState) {
            if ((this.BarcodeValidationOperationCompleted == null)) {
                this.BarcodeValidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBarcodeValidationOperationCompleted);
            }
            this.InvokeAsync("BarcodeValidation", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Barcode1,
                        Barcode2,
                        BarcodeValidateCheckFlag}, this.BarcodeValidationOperationCompleted, userState);
        }
        
        private void OnBarcodeValidationOperationCompleted(object arg) {
            if ((this.BarcodeValidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BarcodeValidationCompleted(this, new BarcodeValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetESOP", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsESOP[] GetESOP(string StageCode, string ModelFamily, string WorkStation, string Category, string ComponentPN) {
            object[] results = this.Invoke("GetESOP", new object[] {
                        StageCode,
                        ModelFamily,
                        WorkStation,
                        Category,
                        ComponentPN});
            return ((clsESOP[])(results[0]));
        }
        
        /// <remarks/>
        public void GetESOPAsync(string StageCode, string ModelFamily, string WorkStation, string Category, string ComponentPN) {
            this.GetESOPAsync(StageCode, ModelFamily, WorkStation, Category, ComponentPN, null);
        }
        
        /// <remarks/>
        public void GetESOPAsync(string StageCode, string ModelFamily, string WorkStation, string Category, string ComponentPN, object userState) {
            if ((this.GetESOPOperationCompleted == null)) {
                this.GetESOPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetESOPOperationCompleted);
            }
            this.InvokeAsync("GetESOP", new object[] {
                        StageCode,
                        ModelFamily,
                        WorkStation,
                        Category,
                        ComponentPN}, this.GetESOPOperationCompleted, userState);
        }
        
        private void OnGetESOPOperationCompleted(object arg) {
            if ((this.GetESOPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetESOPCompleted(this, new GetESOPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetESOP1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetESOPByUPN", RequestElementName="GetESOPByUPN", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="GetESOPByUPNResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetESOPByUPNResult")]
        public clsESOP[] GetESOP(string StageCode, string ModelFamily, string WorkStation, string Category, string ComponentPN, string UnitPartNumber) {
            object[] results = this.Invoke("GetESOP1", new object[] {
                        StageCode,
                        ModelFamily,
                        WorkStation,
                        Category,
                        ComponentPN,
                        UnitPartNumber});
            return ((clsESOP[])(results[0]));
        }
        
        /// <remarks/>
        public void GetESOP1Async(string StageCode, string ModelFamily, string WorkStation, string Category, string ComponentPN, string UnitPartNumber) {
            this.GetESOP1Async(StageCode, ModelFamily, WorkStation, Category, ComponentPN, UnitPartNumber, null);
        }
        
        /// <remarks/>
        public void GetESOP1Async(string StageCode, string ModelFamily, string WorkStation, string Category, string ComponentPN, string UnitPartNumber, object userState) {
            if ((this.GetESOP1OperationCompleted == null)) {
                this.GetESOP1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetESOP1OperationCompleted);
            }
            this.InvokeAsync("GetESOP1", new object[] {
                        StageCode,
                        ModelFamily,
                        WorkStation,
                        Category,
                        ComponentPN,
                        UnitPartNumber}, this.GetESOP1OperationCompleted, userState);
        }
        
        private void OnGetESOP1OperationCompleted(object arg) {
            if ((this.GetESOP1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetESOP1Completed(this, new GetESOP1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/RequestLabelPrint", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestLabelPrint(clsLabel LabelInformation) {
            this.Invoke("RequestLabelPrint", new object[] {
                        LabelInformation});
        }
        
        /// <remarks/>
        public void RequestLabelPrintAsync(clsLabel LabelInformation) {
            this.RequestLabelPrintAsync(LabelInformation, null);
        }
        
        /// <remarks/>
        public void RequestLabelPrintAsync(clsLabel LabelInformation, object userState) {
            if ((this.RequestLabelPrintOperationCompleted == null)) {
                this.RequestLabelPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestLabelPrintOperationCompleted);
            }
            this.InvokeAsync("RequestLabelPrint", new object[] {
                        LabelInformation}, this.RequestLabelPrintOperationCompleted, userState);
        }
        
        private void OnRequestLabelPrintOperationCompleted(object arg) {
            if ((this.RequestLabelPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestLabelPrintCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/RequestLabelPrintForP2L", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RequestLabelPrintForP2L(string UnitSerialNumber, string StageCode, int LabelType, string WorkStation, int CartonLevel, int LabelQty) {
            object[] results = this.Invoke("RequestLabelPrintForP2L", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        LabelType,
                        WorkStation,
                        CartonLevel,
                        LabelQty});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RequestLabelPrintForP2LAsync(string UnitSerialNumber, string StageCode, int LabelType, string WorkStation, int CartonLevel, int LabelQty) {
            this.RequestLabelPrintForP2LAsync(UnitSerialNumber, StageCode, LabelType, WorkStation, CartonLevel, LabelQty, null);
        }
        
        /// <remarks/>
        public void RequestLabelPrintForP2LAsync(string UnitSerialNumber, string StageCode, int LabelType, string WorkStation, int CartonLevel, int LabelQty, object userState) {
            if ((this.RequestLabelPrintForP2LOperationCompleted == null)) {
                this.RequestLabelPrintForP2LOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestLabelPrintForP2LOperationCompleted);
            }
            this.InvokeAsync("RequestLabelPrintForP2L", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        LabelType,
                        WorkStation,
                        CartonLevel,
                        LabelQty}, this.RequestLabelPrintForP2LOperationCompleted, userState);
        }
        
        private void OnRequestLabelPrintForP2LOperationCompleted(object arg) {
            if ((this.RequestLabelPrintForP2LCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestLabelPrintForP2LCompleted(this, new RequestLabelPrintForP2LCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/PrintUnitLabelByP2LRack", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintUnitLabelByP2LRack(string RackID, string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("PrintUnitLabelByP2LRack", new object[] {
                        RackID,
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintUnitLabelByP2LRackAsync(string RackID, string UnitSerialNumber, string StageCode) {
            this.PrintUnitLabelByP2LRackAsync(RackID, UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void PrintUnitLabelByP2LRackAsync(string RackID, string UnitSerialNumber, string StageCode, object userState) {
            if ((this.PrintUnitLabelByP2LRackOperationCompleted == null)) {
                this.PrintUnitLabelByP2LRackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintUnitLabelByP2LRackOperationCompleted);
            }
            this.InvokeAsync("PrintUnitLabelByP2LRack", new object[] {
                        RackID,
                        UnitSerialNumber,
                        StageCode}, this.PrintUnitLabelByP2LRackOperationCompleted, userState);
        }
        
        private void OnPrintUnitLabelByP2LRackOperationCompleted(object arg) {
            if ((this.PrintUnitLabelByP2LRackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintUnitLabelByP2LRackCompleted(this, new PrintUnitLabelByP2LRackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetMessage", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsMessage GetMessage(string MessageID, string Language, [System.Xml.Serialization.XmlElementAttribute("Parameter")] string[] Parameter) {
            object[] results = this.Invoke("GetMessage", new object[] {
                        MessageID,
                        Language,
                        Parameter});
            return ((clsMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageAsync(string MessageID, string Language, string[] Parameter) {
            this.GetMessageAsync(MessageID, Language, Parameter, null);
        }
        
        /// <remarks/>
        public void GetMessageAsync(string MessageID, string Language, string[] Parameter, object userState) {
            if ((this.GetMessageOperationCompleted == null)) {
                this.GetMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageOperationCompleted);
            }
            this.InvokeAsync("GetMessage", new object[] {
                        MessageID,
                        Language,
                        Parameter}, this.GetMessageOperationCompleted, userState);
        }
        
        private void OnGetMessageOperationCompleted(object arg) {
            if ((this.GetMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageCompleted(this, new GetMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUSNDefect", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsUSNDefect[] GetUSNDefect(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetUSNDefect", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsUSNDefect[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNDefectAsync(string UnitSerialNumber, string StageCode) {
            this.GetUSNDefectAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUSNDefectAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetUSNDefectOperationCompleted == null)) {
                this.GetUSNDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNDefectOperationCompleted);
            }
            this.InvokeAsync("GetUSNDefect", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetUSNDefectOperationCompleted, userState);
        }
        
        private void OnGetUSNDefectOperationCompleted(object arg) {
            if ((this.GetUSNDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNDefectCompleted(this, new GetUSNDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/IsCPNComplete", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCPNComplete(string UnitSerialNumber, string StageCode, bool SequenceControl) {
            object[] results = this.Invoke("IsCPNComplete", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        SequenceControl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCPNCompleteAsync(string UnitSerialNumber, string StageCode, bool SequenceControl) {
            this.IsCPNCompleteAsync(UnitSerialNumber, StageCode, SequenceControl, null);
        }
        
        /// <remarks/>
        public void IsCPNCompleteAsync(string UnitSerialNumber, string StageCode, bool SequenceControl, object userState) {
            if ((this.IsCPNCompleteOperationCompleted == null)) {
                this.IsCPNCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCPNCompleteOperationCompleted);
            }
            this.InvokeAsync("IsCPNComplete", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        SequenceControl}, this.IsCPNCompleteOperationCompleted, userState);
        }
        
        private void OnIsCPNCompleteOperationCompleted(object arg) {
            if ((this.IsCPNCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCPNCompleteCompleted(this, new IsCPNCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetNextCPN", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextCPN(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetNextCPN", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextCPNAsync(string UnitSerialNumber, string StageCode) {
            this.GetNextCPNAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetNextCPNAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetNextCPNOperationCompleted == null)) {
                this.GetNextCPNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextCPNOperationCompleted);
            }
            this.InvokeAsync("GetNextCPN", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetNextCPNOperationCompleted, userState);
        }
        
        private void OnGetNextCPNOperationCompleted(object arg) {
            if ((this.GetNextCPNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextCPNCompleted(this, new GetNextCPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetNextCPN1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetNextCPNForESOP", RequestElementName="GetNextCPNForESOP", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="GetNextCPNForESOPResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetNextCPNForESOPResult")]
        public string GetNextCPN(string UnitSerialNumber, string StageCode, clsMOCheckFlag MOCheckFlag) {
            object[] results = this.Invoke("GetNextCPN1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        MOCheckFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextCPN1Async(string UnitSerialNumber, string StageCode, clsMOCheckFlag MOCheckFlag) {
            this.GetNextCPN1Async(UnitSerialNumber, StageCode, MOCheckFlag, null);
        }
        
        /// <remarks/>
        public void GetNextCPN1Async(string UnitSerialNumber, string StageCode, clsMOCheckFlag MOCheckFlag, object userState) {
            if ((this.GetNextCPN1OperationCompleted == null)) {
                this.GetNextCPN1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextCPN1OperationCompleted);
            }
            this.InvokeAsync("GetNextCPN1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        MOCheckFlag}, this.GetNextCPN1OperationCompleted, userState);
        }
        
        private void OnGetNextCPN1OperationCompleted(object arg) {
            if ((this.GetNextCPN1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextCPN1Completed(this, new GetNextCPN1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/ChkRoute", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChkRoute(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("ChkRoute", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChkRouteAsync(string UnitSerialNumber, string StageCode) {
            this.ChkRouteAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void ChkRouteAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.ChkRouteOperationCompleted == null)) {
                this.ChkRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChkRouteOperationCompleted);
            }
            this.InvokeAsync("ChkRoute", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.ChkRouteOperationCompleted, userState);
        }
        
        private void OnChkRouteOperationCompleted(object arg) {
            if ((this.ChkRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChkRouteCompleted(this, new ChkRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/Complete", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Complete(string UnitSerialNumber, string Line, string StageCode, bool Pass, string StationName, string EmployeeID, [System.Xml.Serialization.XmlArrayItemAttribute("TrnData")] string[] TrnDatas) {
            object[] results = this.Invoke("Complete", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        Pass,
                        StationName,
                        EmployeeID,
                        TrnDatas});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteAsync(string UnitSerialNumber, string Line, string StageCode, bool Pass, string StationName, string EmployeeID, string[] TrnDatas) {
            this.CompleteAsync(UnitSerialNumber, Line, StageCode, Pass, StationName, EmployeeID, TrnDatas, null);
        }
        
        /// <remarks/>
        public void CompleteAsync(string UnitSerialNumber, string Line, string StageCode, bool Pass, string StationName, string EmployeeID, string[] TrnDatas, object userState) {
            if ((this.CompleteOperationCompleted == null)) {
                this.CompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteOperationCompleted);
            }
            this.InvokeAsync("Complete", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        Pass,
                        StationName,
                        EmployeeID,
                        TrnDatas}, this.CompleteOperationCompleted, userState);
        }
        
        private void OnCompleteOperationCompleted(object arg) {
            if ((this.CompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteCompleted(this, new CompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckSampling", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsProcessStartData CheckSampling(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckSampling", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsProcessStartData)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSamplingAsync(string UnitSerialNumber, string StageCode) {
            this.CheckSamplingAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckSamplingAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckSamplingOperationCompleted == null)) {
                this.CheckSamplingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSamplingOperationCompleted);
            }
            this.InvokeAsync("CheckSampling", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckSamplingOperationCompleted, userState);
        }
        
        private void OnCheckSamplingOperationCompleted(object arg) {
            if ((this.CheckSamplingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSamplingCompleted(this, new CheckSamplingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetPackageItem", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPackageItem(string PackageID, string StageCode, int PackageLevel, int PackageType) {
            object[] results = this.Invoke("GetPackageItem", new object[] {
                        PackageID,
                        StageCode,
                        PackageLevel,
                        PackageType});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageItemAsync(string PackageID, string StageCode, int PackageLevel, int PackageType) {
            this.GetPackageItemAsync(PackageID, StageCode, PackageLevel, PackageType, null);
        }
        
        /// <remarks/>
        public void GetPackageItemAsync(string PackageID, string StageCode, int PackageLevel, int PackageType, object userState) {
            if ((this.GetPackageItemOperationCompleted == null)) {
                this.GetPackageItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageItemOperationCompleted);
            }
            this.InvokeAsync("GetPackageItem", new object[] {
                        PackageID,
                        StageCode,
                        PackageLevel,
                        PackageType}, this.GetPackageItemOperationCompleted, userState);
        }
        
        private void OnGetPackageItemOperationCompleted(object arg) {
            if ((this.GetPackageItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageItemCompleted(this, new GetPackageItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUPNPackage", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsUPNPackage[] GetUPNPackage(string ModelFamily, string UnitPartNumber, int PackageLevel, int PackageType, string StageCode) {
            object[] results = this.Invoke("GetUPNPackage", new object[] {
                        ModelFamily,
                        UnitPartNumber,
                        PackageLevel,
                        PackageType,
                        StageCode});
            return ((clsUPNPackage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUPNPackageAsync(string ModelFamily, string UnitPartNumber, int PackageLevel, int PackageType, string StageCode) {
            this.GetUPNPackageAsync(ModelFamily, UnitPartNumber, PackageLevel, PackageType, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUPNPackageAsync(string ModelFamily, string UnitPartNumber, int PackageLevel, int PackageType, string StageCode, object userState) {
            if ((this.GetUPNPackageOperationCompleted == null)) {
                this.GetUPNPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUPNPackageOperationCompleted);
            }
            this.InvokeAsync("GetUPNPackage", new object[] {
                        ModelFamily,
                        UnitPartNumber,
                        PackageLevel,
                        PackageType,
                        StageCode}, this.GetUPNPackageOperationCompleted, userState);
        }
        
        private void OnGetUPNPackageOperationCompleted(object arg) {
            if ((this.GetUPNPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUPNPackageCompleted(this, new GetUPNPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetUPNPackage1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUPNPackagebByProductGroup", RequestElementName="GetUPNPackagebByProductGroup", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="GetUPNPackagebByProductGroupResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetUPNPackagebByProductGroupResult")]
        public clsUPNPackage[] GetUPNPackage(string ModelFamily, string UnitPartNumber, int PackageLevel, int PackageType, string StageCode, string ProductGroup) {
            object[] results = this.Invoke("GetUPNPackage1", new object[] {
                        ModelFamily,
                        UnitPartNumber,
                        PackageLevel,
                        PackageType,
                        StageCode,
                        ProductGroup});
            return ((clsUPNPackage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUPNPackage1Async(string ModelFamily, string UnitPartNumber, int PackageLevel, int PackageType, string StageCode, string ProductGroup) {
            this.GetUPNPackage1Async(ModelFamily, UnitPartNumber, PackageLevel, PackageType, StageCode, ProductGroup, null);
        }
        
        /// <remarks/>
        public void GetUPNPackage1Async(string ModelFamily, string UnitPartNumber, int PackageLevel, int PackageType, string StageCode, string ProductGroup, object userState) {
            if ((this.GetUPNPackage1OperationCompleted == null)) {
                this.GetUPNPackage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUPNPackage1OperationCompleted);
            }
            this.InvokeAsync("GetUPNPackage1", new object[] {
                        ModelFamily,
                        UnitPartNumber,
                        PackageLevel,
                        PackageType,
                        StageCode,
                        ProductGroup}, this.GetUPNPackage1OperationCompleted, userState);
        }
        
        private void OnGetUPNPackage1OperationCompleted(object arg) {
            if ((this.GetUPNPackage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUPNPackage1Completed(this, new GetUPNPackage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GeneratePackageID", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneratePackageID(string StageCode, string IDFormat, string IDName, [System.Xml.Serialization.XmlArrayItemAttribute("KeyItem")] clsKeyItem[] KeyItems) {
            object[] results = this.Invoke("GeneratePackageID", new object[] {
                        StageCode,
                        IDFormat,
                        IDName,
                        KeyItems});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePackageIDAsync(string StageCode, string IDFormat, string IDName, clsKeyItem[] KeyItems) {
            this.GeneratePackageIDAsync(StageCode, IDFormat, IDName, KeyItems, null);
        }
        
        /// <remarks/>
        public void GeneratePackageIDAsync(string StageCode, string IDFormat, string IDName, clsKeyItem[] KeyItems, object userState) {
            if ((this.GeneratePackageIDOperationCompleted == null)) {
                this.GeneratePackageIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePackageIDOperationCompleted);
            }
            this.InvokeAsync("GeneratePackageID", new object[] {
                        StageCode,
                        IDFormat,
                        IDName,
                        KeyItems}, this.GeneratePackageIDOperationCompleted, userState);
        }
        
        private void OnGeneratePackageIDOperationCompleted(object arg) {
            if ((this.GeneratePackageIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePackageIDCompleted(this, new GeneratePackageIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GeneratePackageID1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GeneratePackageIDByPKIDName", RequestElementName="GeneratePackageIDByPKIDName", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="GeneratePackageIDByPKIDNameResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GeneratePackageIDByPKIDNameResult")]
        public string GeneratePackageID(string StageCode, string IDFormat, string IDName, [System.Xml.Serialization.XmlArrayItemAttribute("KeyItem")] clsKeyItem[] KeyItems, string PackageIDName) {
            object[] results = this.Invoke("GeneratePackageID1", new object[] {
                        StageCode,
                        IDFormat,
                        IDName,
                        KeyItems,
                        PackageIDName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePackageID1Async(string StageCode, string IDFormat, string IDName, clsKeyItem[] KeyItems, string PackageIDName) {
            this.GeneratePackageID1Async(StageCode, IDFormat, IDName, KeyItems, PackageIDName, null);
        }
        
        /// <remarks/>
        public void GeneratePackageID1Async(string StageCode, string IDFormat, string IDName, clsKeyItem[] KeyItems, string PackageIDName, object userState) {
            if ((this.GeneratePackageID1OperationCompleted == null)) {
                this.GeneratePackageID1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePackageID1OperationCompleted);
            }
            this.InvokeAsync("GeneratePackageID1", new object[] {
                        StageCode,
                        IDFormat,
                        IDName,
                        KeyItems,
                        PackageIDName}, this.GeneratePackageID1OperationCompleted, userState);
        }
        
        private void OnGeneratePackageID1OperationCompleted(object arg) {
            if ((this.GeneratePackageID1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePackageID1Completed(this, new GeneratePackageID1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/UploadMAC", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadMAC(string UnitSerialNumber, string StageCode, string Category, string MAC) {
            object[] results = this.Invoke("UploadMAC", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        MAC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadMACAsync(string UnitSerialNumber, string StageCode, string Category, string MAC) {
            this.UploadMACAsync(UnitSerialNumber, StageCode, Category, MAC, null);
        }
        
        /// <remarks/>
        public void UploadMACAsync(string UnitSerialNumber, string StageCode, string Category, string MAC, object userState) {
            if ((this.UploadMACOperationCompleted == null)) {
                this.UploadMACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadMACOperationCompleted);
            }
            this.InvokeAsync("UploadMAC", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        MAC}, this.UploadMACOperationCompleted, userState);
        }
        
        private void OnUploadMACOperationCompleted(object arg) {
            if ((this.UploadMACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadMACCompleted(this, new UploadMACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetSampling", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetSampling(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetSampling", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSamplingAsync(string UnitSerialNumber, string StageCode) {
            this.GetSamplingAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetSamplingAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetSamplingOperationCompleted == null)) {
                this.GetSamplingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSamplingOperationCompleted);
            }
            this.InvokeAsync("GetSampling", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetSamplingOperationCompleted, userState);
        }
        
        private void OnGetSamplingOperationCompleted(object arg) {
            if ((this.GetSamplingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSamplingCompleted(this, new GetSamplingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetNextStage", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextStage(string UnitSerialNumber, string StageCode, string PIAStageCode) {
            object[] results = this.Invoke("GetNextStage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        PIAStageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextStageAsync(string UnitSerialNumber, string StageCode, string PIAStageCode) {
            this.GetNextStageAsync(UnitSerialNumber, StageCode, PIAStageCode, null);
        }
        
        /// <remarks/>
        public void GetNextStageAsync(string UnitSerialNumber, string StageCode, string PIAStageCode, object userState) {
            if ((this.GetNextStageOperationCompleted == null)) {
                this.GetNextStageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextStageOperationCompleted);
            }
            this.InvokeAsync("GetNextStage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        PIAStageCode}, this.GetNextStageOperationCompleted, userState);
        }
        
        private void OnGetNextStageOperationCompleted(object arg) {
            if ((this.GetNextStageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextStageCompleted(this, new GetNextStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetCOA", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCOA(string Plant, string COA, string ComponentPN, string UnitSerialNumber, string StageCode, int COAStatus) {
            object[] results = this.Invoke("SetCOA", new object[] {
                        Plant,
                        COA,
                        ComponentPN,
                        UnitSerialNumber,
                        StageCode,
                        COAStatus});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCOAAsync(string Plant, string COA, string ComponentPN, string UnitSerialNumber, string StageCode, int COAStatus) {
            this.SetCOAAsync(Plant, COA, ComponentPN, UnitSerialNumber, StageCode, COAStatus, null);
        }
        
        /// <remarks/>
        public void SetCOAAsync(string Plant, string COA, string ComponentPN, string UnitSerialNumber, string StageCode, int COAStatus, object userState) {
            if ((this.SetCOAOperationCompleted == null)) {
                this.SetCOAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCOAOperationCompleted);
            }
            this.InvokeAsync("SetCOA", new object[] {
                        Plant,
                        COA,
                        ComponentPN,
                        UnitSerialNumber,
                        StageCode,
                        COAStatus}, this.SetCOAOperationCompleted, userState);
        }
        
        private void OnSetCOAOperationCompleted(object arg) {
            if ((this.SetCOACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCOACompleted(this, new SetCOACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetMAC", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMAC(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetMAC", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMACAsync(string UnitSerialNumber, string StageCode) {
            this.GetMACAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetMACAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetMACOperationCompleted == null)) {
                this.GetMACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMACOperationCompleted);
            }
            this.InvokeAsync("GetMAC", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetMACOperationCompleted, userState);
        }
        
        private void OnGetMACOperationCompleted(object arg) {
            if ((this.GetMACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMACCompleted(this, new GetMACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetMACOUI", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMACOUI(string UnitPartNumber, string StageCode) {
            object[] results = this.Invoke("GetMACOUI", new object[] {
                        UnitPartNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMACOUIAsync(string UnitPartNumber, string StageCode) {
            this.GetMACOUIAsync(UnitPartNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetMACOUIAsync(string UnitPartNumber, string StageCode, object userState) {
            if ((this.GetMACOUIOperationCompleted == null)) {
                this.GetMACOUIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMACOUIOperationCompleted);
            }
            this.InvokeAsync("GetMACOUI", new object[] {
                        UnitPartNumber,
                        StageCode}, this.GetMACOUIOperationCompleted, userState);
        }
        
        private void OnGetMACOUIOperationCompleted(object arg) {
            if ((this.GetMACOUICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMACOUICompleted(this, new GetMACOUICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/IsRoHSItem", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsRoHSItem(string Plant, string PartNumber) {
            object[] results = this.Invoke("IsRoHSItem", new object[] {
                        Plant,
                        PartNumber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsRoHSItemAsync(string Plant, string PartNumber) {
            this.IsRoHSItemAsync(Plant, PartNumber, null);
        }
        
        /// <remarks/>
        public void IsRoHSItemAsync(string Plant, string PartNumber, object userState) {
            if ((this.IsRoHSItemOperationCompleted == null)) {
                this.IsRoHSItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRoHSItemOperationCompleted);
            }
            this.InvokeAsync("IsRoHSItem", new object[] {
                        Plant,
                        PartNumber}, this.IsRoHSItemOperationCompleted, userState);
        }
        
        private void OnIsRoHSItemOperationCompleted(object arg) {
            if ((this.IsRoHSItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRoHSItemCompleted(this, new IsRoHSItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/VerifyRoHSPair", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyRoHSPair(string Plant, string StageCode, string UnitPartNumber, string ComponentPN) {
            object[] results = this.Invoke("VerifyRoHSPair", new object[] {
                        Plant,
                        StageCode,
                        UnitPartNumber,
                        ComponentPN});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyRoHSPairAsync(string Plant, string StageCode, string UnitPartNumber, string ComponentPN) {
            this.VerifyRoHSPairAsync(Plant, StageCode, UnitPartNumber, ComponentPN, null);
        }
        
        /// <remarks/>
        public void VerifyRoHSPairAsync(string Plant, string StageCode, string UnitPartNumber, string ComponentPN, object userState) {
            if ((this.VerifyRoHSPairOperationCompleted == null)) {
                this.VerifyRoHSPairOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyRoHSPairOperationCompleted);
            }
            this.InvokeAsync("VerifyRoHSPair", new object[] {
                        Plant,
                        StageCode,
                        UnitPartNumber,
                        ComponentPN}, this.VerifyRoHSPairOperationCompleted, userState);
        }
        
        private void OnVerifyRoHSPairOperationCompleted(object arg) {
            if ((this.VerifyRoHSPairCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyRoHSPairCompleted(this, new VerifyRoHSPairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="VerifyRoHSPair1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/VerifyRoHSPairByMO", RequestElementName="VerifyRoHSPairByMO", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="VerifyRoHSPairByMOResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("VerifyRoHSPairByMOResult")]
        public bool VerifyRoHSPair(string Plant, string ManufactureOrder, string StageCode, string UnitPartNumber, string ComponentPN) {
            object[] results = this.Invoke("VerifyRoHSPair1", new object[] {
                        Plant,
                        ManufactureOrder,
                        StageCode,
                        UnitPartNumber,
                        ComponentPN});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyRoHSPair1Async(string Plant, string ManufactureOrder, string StageCode, string UnitPartNumber, string ComponentPN) {
            this.VerifyRoHSPair1Async(Plant, ManufactureOrder, StageCode, UnitPartNumber, ComponentPN, null);
        }
        
        /// <remarks/>
        public void VerifyRoHSPair1Async(string Plant, string ManufactureOrder, string StageCode, string UnitPartNumber, string ComponentPN, object userState) {
            if ((this.VerifyRoHSPair1OperationCompleted == null)) {
                this.VerifyRoHSPair1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyRoHSPair1OperationCompleted);
            }
            this.InvokeAsync("VerifyRoHSPair1", new object[] {
                        Plant,
                        ManufactureOrder,
                        StageCode,
                        UnitPartNumber,
                        ComponentPN}, this.VerifyRoHSPair1OperationCompleted, userState);
        }
        
        private void OnVerifyRoHSPair1OperationCompleted(object arg) {
            if ((this.VerifyRoHSPair1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyRoHSPair1Completed(this, new VerifyRoHSPair1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetGPInfor", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsGPInfo GetGPInfor(string Plant, string StageCode, string UnitPartNumber) {
            object[] results = this.Invoke("GetGPInfor", new object[] {
                        Plant,
                        StageCode,
                        UnitPartNumber});
            return ((clsGPInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetGPInforAsync(string Plant, string StageCode, string UnitPartNumber) {
            this.GetGPInforAsync(Plant, StageCode, UnitPartNumber, null);
        }
        
        /// <remarks/>
        public void GetGPInforAsync(string Plant, string StageCode, string UnitPartNumber, object userState) {
            if ((this.GetGPInforOperationCompleted == null)) {
                this.GetGPInforOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGPInforOperationCompleted);
            }
            this.InvokeAsync("GetGPInfor", new object[] {
                        Plant,
                        StageCode,
                        UnitPartNumber}, this.GetGPInforOperationCompleted, userState);
        }
        
        private void OnGetGPInforOperationCompleted(object arg) {
            if ((this.GetGPInforCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGPInforCompleted(this, new GetGPInforCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetItemValue", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsKeyItem[] GetItemValue(string UnitSerialNumber, string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("KeyItem")] clsKeyItem[] KeyItems) {
            object[] results = this.Invoke("GetItemValue", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        KeyItems});
            return ((clsKeyItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetItemValueAsync(string UnitSerialNumber, string StageCode, clsKeyItem[] KeyItems) {
            this.GetItemValueAsync(UnitSerialNumber, StageCode, KeyItems, null);
        }
        
        /// <remarks/>
        public void GetItemValueAsync(string UnitSerialNumber, string StageCode, clsKeyItem[] KeyItems, object userState) {
            if ((this.GetItemValueOperationCompleted == null)) {
                this.GetItemValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemValueOperationCompleted);
            }
            this.InvokeAsync("GetItemValue", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        KeyItems}, this.GetItemValueOperationCompleted, userState);
        }
        
        private void OnGetItemValueOperationCompleted(object arg) {
            if ((this.GetItemValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemValueCompleted(this, new GetItemValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/HoldOperation", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HoldOperation(string StageCode, clsHoldKey HoldKey) {
            object[] results = this.Invoke("HoldOperation", new object[] {
                        StageCode,
                        HoldKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HoldOperationAsync(string StageCode, clsHoldKey HoldKey) {
            this.HoldOperationAsync(StageCode, HoldKey, null);
        }
        
        /// <remarks/>
        public void HoldOperationAsync(string StageCode, clsHoldKey HoldKey, object userState) {
            if ((this.HoldOperationOperationCompleted == null)) {
                this.HoldOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHoldOperationOperationCompleted);
            }
            this.InvokeAsync("HoldOperation", new object[] {
                        StageCode,
                        HoldKey}, this.HoldOperationOperationCompleted, userState);
        }
        
        private void OnHoldOperationOperationCompleted(object arg) {
            if ((this.HoldOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HoldOperationCompleted(this, new HoldOperationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/ReleaseOperation", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReleaseOperation(string StageCode, clsReleaseKey ReleaseKey) {
            object[] results = this.Invoke("ReleaseOperation", new object[] {
                        StageCode,
                        ReleaseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReleaseOperationAsync(string StageCode, clsReleaseKey ReleaseKey) {
            this.ReleaseOperationAsync(StageCode, ReleaseKey, null);
        }
        
        /// <remarks/>
        public void ReleaseOperationAsync(string StageCode, clsReleaseKey ReleaseKey, object userState) {
            if ((this.ReleaseOperationOperationCompleted == null)) {
                this.ReleaseOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseOperationOperationCompleted);
            }
            this.InvokeAsync("ReleaseOperation", new object[] {
                        StageCode,
                        ReleaseKey}, this.ReleaseOperationOperationCompleted, userState);
        }
        
        private void OnReleaseOperationOperationCompleted(object arg) {
            if ((this.ReleaseOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseOperationCompleted(this, new ReleaseOperationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/BoardExceedRequiredHours", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BoardExceedRequiredHours(string UnitSerialNumber, float ExceedHours) {
            object[] results = this.Invoke("BoardExceedRequiredHours", new object[] {
                        UnitSerialNumber,
                        ExceedHours});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BoardExceedRequiredHoursAsync(string UnitSerialNumber, float ExceedHours) {
            this.BoardExceedRequiredHoursAsync(UnitSerialNumber, ExceedHours, null);
        }
        
        /// <remarks/>
        public void BoardExceedRequiredHoursAsync(string UnitSerialNumber, float ExceedHours, object userState) {
            if ((this.BoardExceedRequiredHoursOperationCompleted == null)) {
                this.BoardExceedRequiredHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoardExceedRequiredHoursOperationCompleted);
            }
            this.InvokeAsync("BoardExceedRequiredHours", new object[] {
                        UnitSerialNumber,
                        ExceedHours}, this.BoardExceedRequiredHoursOperationCompleted, userState);
        }
        
        private void OnBoardExceedRequiredHoursOperationCompleted(object arg) {
            if ((this.BoardExceedRequiredHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoardExceedRequiredHoursCompleted(this, new BoardExceedRequiredHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="BoardExceedRequiredHours1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/BoardExceedRequiredHoursByStage", RequestElementName="BoardExceedRequiredHoursByStage", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="BoardExceedRequiredHoursByStageResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("BoardExceedRequiredHoursByStageResult")]
        public bool BoardExceedRequiredHours(string UnitSerialNumber, float ExceedHours, int ExceedType, string CurrentStage, string RequiredStage) {
            object[] results = this.Invoke("BoardExceedRequiredHours1", new object[] {
                        UnitSerialNumber,
                        ExceedHours,
                        ExceedType,
                        CurrentStage,
                        RequiredStage});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BoardExceedRequiredHours1Async(string UnitSerialNumber, float ExceedHours, int ExceedType, string CurrentStage, string RequiredStage) {
            this.BoardExceedRequiredHours1Async(UnitSerialNumber, ExceedHours, ExceedType, CurrentStage, RequiredStage, null);
        }
        
        /// <remarks/>
        public void BoardExceedRequiredHours1Async(string UnitSerialNumber, float ExceedHours, int ExceedType, string CurrentStage, string RequiredStage, object userState) {
            if ((this.BoardExceedRequiredHours1OperationCompleted == null)) {
                this.BoardExceedRequiredHours1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoardExceedRequiredHours1OperationCompleted);
            }
            this.InvokeAsync("BoardExceedRequiredHours1", new object[] {
                        UnitSerialNumber,
                        ExceedHours,
                        ExceedType,
                        CurrentStage,
                        RequiredStage}, this.BoardExceedRequiredHours1OperationCompleted, userState);
        }
        
        private void OnBoardExceedRequiredHours1OperationCompleted(object arg) {
            if ((this.BoardExceedRequiredHours1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoardExceedRequiredHours1Completed(this, new BoardExceedRequiredHours1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/P2LStatusUpdate", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string P2LStatusUpdate(string ManufactureOrder, int P2LStatus) {
            object[] results = this.Invoke("P2LStatusUpdate", new object[] {
                        ManufactureOrder,
                        P2LStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void P2LStatusUpdateAsync(string ManufactureOrder, int P2LStatus) {
            this.P2LStatusUpdateAsync(ManufactureOrder, P2LStatus, null);
        }
        
        /// <remarks/>
        public void P2LStatusUpdateAsync(string ManufactureOrder, int P2LStatus, object userState) {
            if ((this.P2LStatusUpdateOperationCompleted == null)) {
                this.P2LStatusUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP2LStatusUpdateOperationCompleted);
            }
            this.InvokeAsync("P2LStatusUpdate", new object[] {
                        ManufactureOrder,
                        P2LStatus}, this.P2LStatusUpdateOperationCompleted, userState);
        }
        
        private void OnP2LStatusUpdateOperationCompleted(object arg) {
            if ((this.P2LStatusUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P2LStatusUpdateCompleted(this, new P2LStatusUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetPackageID", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackageID(string StageCode, string UnitPartNumber, int Level, int PackageType) {
            object[] results = this.Invoke("GetPackageID", new object[] {
                        StageCode,
                        UnitPartNumber,
                        Level,
                        PackageType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageIDAsync(string StageCode, string UnitPartNumber, int Level, int PackageType) {
            this.GetPackageIDAsync(StageCode, UnitPartNumber, Level, PackageType, null);
        }
        
        /// <remarks/>
        public void GetPackageIDAsync(string StageCode, string UnitPartNumber, int Level, int PackageType, object userState) {
            if ((this.GetPackageIDOperationCompleted == null)) {
                this.GetPackageIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageIDOperationCompleted);
            }
            this.InvokeAsync("GetPackageID", new object[] {
                        StageCode,
                        UnitPartNumber,
                        Level,
                        PackageType}, this.GetPackageIDOperationCompleted, userState);
        }
        
        private void OnGetPackageIDOperationCompleted(object arg) {
            if ((this.GetPackageIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageIDCompleted(this, new GetPackageIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUSNItem", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNItem(string UnitSerialNumber, string StageCode, string Category, int Sequence) {
            object[] results = this.Invoke("GetUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        Sequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, int Sequence) {
            this.GetUSNItemAsync(UnitSerialNumber, StageCode, Category, Sequence, null);
        }
        
        /// <remarks/>
        public void GetUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, int Sequence, object userState) {
            if ((this.GetUSNItemOperationCompleted == null)) {
                this.GetUSNItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNItemOperationCompleted);
            }
            this.InvokeAsync("GetUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        Sequence}, this.GetUSNItemOperationCompleted, userState);
        }
        
        private void OnGetUSNItemOperationCompleted(object arg) {
            if ((this.GetUSNItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNItemCompleted(this, new GetUSNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/BatchCompleteProcess", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BatchCompleteProcess([System.Xml.Serialization.XmlArrayItemAttribute("Unit", IsNullable=false)] stcUSN[] Units, clsTransaction Transaction) {
            object[] results = this.Invoke("BatchCompleteProcess", new object[] {
                        Units,
                        Transaction});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BatchCompleteProcessAsync(stcUSN[] Units, clsTransaction Transaction) {
            this.BatchCompleteProcessAsync(Units, Transaction, null);
        }
        
        /// <remarks/>
        public void BatchCompleteProcessAsync(stcUSN[] Units, clsTransaction Transaction, object userState) {
            if ((this.BatchCompleteProcessOperationCompleted == null)) {
                this.BatchCompleteProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchCompleteProcessOperationCompleted);
            }
            this.InvokeAsync("BatchCompleteProcess", new object[] {
                        Units,
                        Transaction}, this.BatchCompleteProcessOperationCompleted, userState);
        }
        
        private void OnBatchCompleteProcessOperationCompleted(object arg) {
            if ((this.BatchCompleteProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchCompleteProcessCompleted(this, new BatchCompleteProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetModelName", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetModelName(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetModelName", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetModelNameAsync(string UnitSerialNumber, string StageCode) {
            this.GetModelNameAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetModelNameAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetModelNameOperationCompleted == null)) {
                this.GetModelNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModelNameOperationCompleted);
            }
            this.InvokeAsync("GetModelName", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetModelNameOperationCompleted, userState);
        }
        
        private void OnGetModelNameOperationCompleted(object arg) {
            if ((this.GetModelNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModelNameCompleted(this, new GetModelNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetLinkUSN", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetLinkUSN(string UnitSerialNumber) {
            object[] results = this.Invoke("GetLinkUSN", new object[] {
                        UnitSerialNumber});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkUSNAsync(string UnitSerialNumber) {
            this.GetLinkUSNAsync(UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetLinkUSNAsync(string UnitSerialNumber, object userState) {
            if ((this.GetLinkUSNOperationCompleted == null)) {
                this.GetLinkUSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkUSNOperationCompleted);
            }
            this.InvokeAsync("GetLinkUSN", new object[] {
                        UnitSerialNumber}, this.GetLinkUSNOperationCompleted, userState);
        }
        
        private void OnGetLinkUSNOperationCompleted(object arg) {
            if ((this.GetLinkUSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkUSNCompleted(this, new GetLinkUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetLinkUSN1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetLinkUSNAndResult", RequestElementName="GetLinkUSNAndResult", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseElementName="GetLinkUSNAndResultResponse", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetLinkUSNAndResultResult")]
        public string[] GetLinkUSN(string UnitSerialNumber, ref string ResultMessage) {
            object[] results = this.Invoke("GetLinkUSN1", new object[] {
                        UnitSerialNumber,
                        ResultMessage});
            ResultMessage = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkUSN1Async(string UnitSerialNumber, string ResultMessage) {
            this.GetLinkUSN1Async(UnitSerialNumber, ResultMessage, null);
        }
        
        /// <remarks/>
        public void GetLinkUSN1Async(string UnitSerialNumber, string ResultMessage, object userState) {
            if ((this.GetLinkUSN1OperationCompleted == null)) {
                this.GetLinkUSN1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkUSN1OperationCompleted);
            }
            this.InvokeAsync("GetLinkUSN1", new object[] {
                        UnitSerialNumber,
                        ResultMessage}, this.GetLinkUSN1OperationCompleted, userState);
        }
        
        private void OnGetLinkUSN1OperationCompleted(object arg) {
            if ((this.GetLinkUSN1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkUSN1Completed(this, new GetLinkUSN1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetLinkUSNAndMessage", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetLinkUSNAndMessage(string UnitSerialNumber, ref string ResultMessage) {
            object[] results = this.Invoke("GetLinkUSNAndMessage", new object[] {
                        UnitSerialNumber,
                        ResultMessage});
            ResultMessage = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkUSNAndMessageAsync(string UnitSerialNumber, string ResultMessage) {
            this.GetLinkUSNAndMessageAsync(UnitSerialNumber, ResultMessage, null);
        }
        
        /// <remarks/>
        public void GetLinkUSNAndMessageAsync(string UnitSerialNumber, string ResultMessage, object userState) {
            if ((this.GetLinkUSNAndMessageOperationCompleted == null)) {
                this.GetLinkUSNAndMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkUSNAndMessageOperationCompleted);
            }
            this.InvokeAsync("GetLinkUSNAndMessage", new object[] {
                        UnitSerialNumber,
                        ResultMessage}, this.GetLinkUSNAndMessageOperationCompleted, userState);
        }
        
        private void OnGetLinkUSNAndMessageOperationCompleted(object arg) {
            if ((this.GetLinkUSNAndMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkUSNAndMessageCompleted(this, new GetLinkUSNAndMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUSNID", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUSNID(string UnitSerialNumber, string StageCode, string Category) {
            object[] results = this.Invoke("GetUSNID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNIDAsync(string UnitSerialNumber, string StageCode, string Category) {
            this.GetUSNIDAsync(UnitSerialNumber, StageCode, Category, null);
        }
        
        /// <remarks/>
        public void GetUSNIDAsync(string UnitSerialNumber, string StageCode, string Category, object userState) {
            if ((this.GetUSNIDOperationCompleted == null)) {
                this.GetUSNIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNIDOperationCompleted);
            }
            this.InvokeAsync("GetUSNID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category}, this.GetUSNIDOperationCompleted, userState);
        }
        
        private void OnGetUSNIDOperationCompleted(object arg) {
            if ((this.GetUSNIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNIDCompleted(this, new GetUSNIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/UploadUSNItem", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadUSNItem(string UnitSerialNumber, string StageCode, string Category, string ComponentSerialNumber, int Sequence, int CheckUsed) {
            object[] results = this.Invoke("UploadUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        ComponentSerialNumber,
                        Sequence,
                        CheckUsed});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, string ComponentSerialNumber, int Sequence, int CheckUsed) {
            this.UploadUSNItemAsync(UnitSerialNumber, StageCode, Category, ComponentSerialNumber, Sequence, CheckUsed, null);
        }
        
        /// <remarks/>
        public void UploadUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, string ComponentSerialNumber, int Sequence, int CheckUsed, object userState) {
            if ((this.UploadUSNItemOperationCompleted == null)) {
                this.UploadUSNItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadUSNItemOperationCompleted);
            }
            this.InvokeAsync("UploadUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        ComponentSerialNumber,
                        Sequence,
                        CheckUsed}, this.UploadUSNItemOperationCompleted, userState);
        }
        
        private void OnUploadUSNItemOperationCompleted(object arg) {
            if ((this.UploadUSNItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadUSNItemCompleted(this, new UploadUSNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetWebServiceInfo", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsWSInfo GetWebServiceInfo() {
            object[] results = this.Invoke("GetWebServiceInfo", new object[0]);
            return ((clsWSInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebServiceInfoAsync() {
            this.GetWebServiceInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetWebServiceInfoAsync(object userState) {
            if ((this.GetWebServiceInfoOperationCompleted == null)) {
                this.GetWebServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebServiceInfoOperationCompleted);
            }
            this.InvokeAsync("GetWebServiceInfo", new object[0], this.GetWebServiceInfoOperationCompleted, userState);
        }
        
        private void OnGetWebServiceInfoOperationCompleted(object arg) {
            if ((this.GetWebServiceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebServiceInfoCompleted(this, new GetWebServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetWebServiceConfig", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsWSConfig[] GetWebServiceConfig() {
            object[] results = this.Invoke("GetWebServiceConfig", new object[0]);
            return ((clsWSConfig[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWebServiceConfigAsync() {
            this.GetWebServiceConfigAsync(null);
        }
        
        /// <remarks/>
        public void GetWebServiceConfigAsync(object userState) {
            if ((this.GetWebServiceConfigOperationCompleted == null)) {
                this.GetWebServiceConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebServiceConfigOperationCompleted);
            }
            this.InvokeAsync("GetWebServiceConfig", new object[0], this.GetWebServiceConfigOperationCompleted, userState);
        }
        
        private void OnGetWebServiceConfigOperationCompleted(object arg) {
            if ((this.GetWebServiceConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebServiceConfigCompleted(this, new GetWebServiceConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetLabelJobSetting", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsLabel[] GetLabelJobSetting(string UnitPartNumber, string StageCode) {
            object[] results = this.Invoke("GetLabelJobSetting", new object[] {
                        UnitPartNumber,
                        StageCode});
            return ((clsLabel[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLabelJobSettingAsync(string UnitPartNumber, string StageCode) {
            this.GetLabelJobSettingAsync(UnitPartNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetLabelJobSettingAsync(string UnitPartNumber, string StageCode, object userState) {
            if ((this.GetLabelJobSettingOperationCompleted == null)) {
                this.GetLabelJobSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabelJobSettingOperationCompleted);
            }
            this.InvokeAsync("GetLabelJobSetting", new object[] {
                        UnitPartNumber,
                        StageCode}, this.GetLabelJobSettingOperationCompleted, userState);
        }
        
        private void OnGetLabelJobSettingOperationCompleted(object arg) {
            if ((this.GetLabelJobSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabelJobSettingCompleted(this, new GetLabelJobSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckHold", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckHold(string ManufactureOrder, string StageCode) {
            object[] results = this.Invoke("CheckHold", new object[] {
                        ManufactureOrder,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckHoldAsync(string ManufactureOrder, string StageCode) {
            this.CheckHoldAsync(ManufactureOrder, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckHoldAsync(string ManufactureOrder, string StageCode, object userState) {
            if ((this.CheckHoldOperationCompleted == null)) {
                this.CheckHoldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckHoldOperationCompleted);
            }
            this.InvokeAsync("CheckHold", new object[] {
                        ManufactureOrder,
                        StageCode}, this.CheckHoldOperationCompleted, userState);
        }
        
        private void OnCheckHoldOperationCompleted(object arg) {
            if ((this.CheckHoldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckHoldCompleted(this, new CheckHoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/UnitExceedRequiredTimes", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnitExceedRequiredTimes(string UnitSerialNumber, string StageCode, int ExceedType, int RequiredTimes, string RequiredStage) {
            object[] results = this.Invoke("UnitExceedRequiredTimes", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ExceedType,
                        RequiredTimes,
                        RequiredStage});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnitExceedRequiredTimesAsync(string UnitSerialNumber, string StageCode, int ExceedType, int RequiredTimes, string RequiredStage) {
            this.UnitExceedRequiredTimesAsync(UnitSerialNumber, StageCode, ExceedType, RequiredTimes, RequiredStage, null);
        }
        
        /// <remarks/>
        public void UnitExceedRequiredTimesAsync(string UnitSerialNumber, string StageCode, int ExceedType, int RequiredTimes, string RequiredStage, object userState) {
            if ((this.UnitExceedRequiredTimesOperationCompleted == null)) {
                this.UnitExceedRequiredTimesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitExceedRequiredTimesOperationCompleted);
            }
            this.InvokeAsync("UnitExceedRequiredTimes", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ExceedType,
                        RequiredTimes,
                        RequiredStage}, this.UnitExceedRequiredTimesOperationCompleted, userState);
        }
        
        private void OnUnitExceedRequiredTimesOperationCompleted(object arg) {
            if ((this.UnitExceedRequiredTimesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitExceedRequiredTimesCompleted(this, new UnitExceedRequiredTimesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetCompareSetting", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsCompareSetting GetCompareSetting(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetCompareSetting", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsCompareSetting)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompareSettingAsync(string UnitSerialNumber, string StageCode) {
            this.GetCompareSettingAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetCompareSettingAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetCompareSettingOperationCompleted == null)) {
                this.GetCompareSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompareSettingOperationCompleted);
            }
            this.InvokeAsync("GetCompareSetting", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetCompareSettingOperationCompleted, userState);
        }
        
        private void OnGetCompareSettingOperationCompleted(object arg) {
            if ((this.GetCompareSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompareSettingCompleted(this, new GetCompareSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetUPNWeightTolerance", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsUPNWeightTolerance GetUPNWeightTolerance(string ModelFamily, string UnitPartNumber, string ProductGroup, string StageCode) {
            object[] results = this.Invoke("GetUPNWeightTolerance", new object[] {
                        ModelFamily,
                        UnitPartNumber,
                        ProductGroup,
                        StageCode});
            return ((clsUPNWeightTolerance)(results[0]));
        }
        
        /// <remarks/>
        public void GetUPNWeightToleranceAsync(string ModelFamily, string UnitPartNumber, string ProductGroup, string StageCode) {
            this.GetUPNWeightToleranceAsync(ModelFamily, UnitPartNumber, ProductGroup, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUPNWeightToleranceAsync(string ModelFamily, string UnitPartNumber, string ProductGroup, string StageCode, object userState) {
            if ((this.GetUPNWeightToleranceOperationCompleted == null)) {
                this.GetUPNWeightToleranceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUPNWeightToleranceOperationCompleted);
            }
            this.InvokeAsync("GetUPNWeightTolerance", new object[] {
                        ModelFamily,
                        UnitPartNumber,
                        ProductGroup,
                        StageCode}, this.GetUPNWeightToleranceOperationCompleted, userState);
        }
        
        private void OnGetUPNWeightToleranceOperationCompleted(object arg) {
            if ((this.GetUPNWeightToleranceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUPNWeightToleranceCompleted(this, new GetUPNWeightToleranceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetSOGenealogy", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsSO GetSOGenealogy(string SO, string SOLine, string StageCode) {
            object[] results = this.Invoke("GetSOGenealogy", new object[] {
                        SO,
                        SOLine,
                        StageCode});
            return ((clsSO)(results[0]));
        }
        
        /// <remarks/>
        public void GetSOGenealogyAsync(string SO, string SOLine, string StageCode) {
            this.GetSOGenealogyAsync(SO, SOLine, StageCode, null);
        }
        
        /// <remarks/>
        public void GetSOGenealogyAsync(string SO, string SOLine, string StageCode, object userState) {
            if ((this.GetSOGenealogyOperationCompleted == null)) {
                this.GetSOGenealogyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSOGenealogyOperationCompleted);
            }
            this.InvokeAsync("GetSOGenealogy", new object[] {
                        SO,
                        SOLine,
                        StageCode}, this.GetSOGenealogyOperationCompleted, userState);
        }
        
        private void OnGetSOGenealogyOperationCompleted(object arg) {
            if ((this.GetSOGenealogyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSOGenealogyCompleted(this, new GetSOGenealogyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GenerateLotNo", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateLotNo(string UnitSerialNumber, string StageCode, string Line, string APID) {
            object[] results = this.Invoke("GenerateLotNo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Line,
                        APID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateLotNoAsync(string UnitSerialNumber, string StageCode, string Line, string APID) {
            this.GenerateLotNoAsync(UnitSerialNumber, StageCode, Line, APID, null);
        }
        
        /// <remarks/>
        public void GenerateLotNoAsync(string UnitSerialNumber, string StageCode, string Line, string APID, object userState) {
            if ((this.GenerateLotNoOperationCompleted == null)) {
                this.GenerateLotNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateLotNoOperationCompleted);
            }
            this.InvokeAsync("GenerateLotNo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Line,
                        APID}, this.GenerateLotNoOperationCompleted, userState);
        }
        
        private void OnGenerateLotNoOperationCompleted(object arg) {
            if ((this.GenerateLotNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateLotNoCompleted(this, new GenerateLotNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GenerateLotNoByMO", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateLotNoByMO(string ManufactureOrder, string StageCode, string Line, string APID) {
            object[] results = this.Invoke("GenerateLotNoByMO", new object[] {
                        ManufactureOrder,
                        StageCode,
                        Line,
                        APID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateLotNoByMOAsync(string ManufactureOrder, string StageCode, string Line, string APID) {
            this.GenerateLotNoByMOAsync(ManufactureOrder, StageCode, Line, APID, null);
        }
        
        /// <remarks/>
        public void GenerateLotNoByMOAsync(string ManufactureOrder, string StageCode, string Line, string APID, object userState) {
            if ((this.GenerateLotNoByMOOperationCompleted == null)) {
                this.GenerateLotNoByMOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateLotNoByMOOperationCompleted);
            }
            this.InvokeAsync("GenerateLotNoByMO", new object[] {
                        ManufactureOrder,
                        StageCode,
                        Line,
                        APID}, this.GenerateLotNoByMOOperationCompleted, userState);
        }
        
        private void OnGenerateLotNoByMOOperationCompleted(object arg) {
            if ((this.GenerateLotNoByMOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateLotNoByMOCompleted(this, new GenerateLotNoByMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckPrimaryComponent", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckPrimaryComponent(string UnitSerialNumber, string StageCode, string ComponentPartNumber, string Category, [System.Xml.Serialization.XmlElementAttribute("Parameters")] ref string[] Parameters) {
            object[] results = this.Invoke("CheckPrimaryComponent", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ComponentPartNumber,
                        Category,
                        Parameters});
            Parameters = ((string[])(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPrimaryComponentAsync(string UnitSerialNumber, string StageCode, string ComponentPartNumber, string Category, string[] Parameters) {
            this.CheckPrimaryComponentAsync(UnitSerialNumber, StageCode, ComponentPartNumber, Category, Parameters, null);
        }
        
        /// <remarks/>
        public void CheckPrimaryComponentAsync(string UnitSerialNumber, string StageCode, string ComponentPartNumber, string Category, string[] Parameters, object userState) {
            if ((this.CheckPrimaryComponentOperationCompleted == null)) {
                this.CheckPrimaryComponentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPrimaryComponentOperationCompleted);
            }
            this.InvokeAsync("CheckPrimaryComponent", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ComponentPartNumber,
                        Category,
                        Parameters}, this.CheckPrimaryComponentOperationCompleted, userState);
        }
        
        private void OnCheckPrimaryComponentOperationCompleted(object arg) {
            if ((this.CheckPrimaryComponentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPrimaryComponentCompleted(this, new CheckPrimaryComponentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetLightForUnit", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetLightForUnit(string UnitSerialNumber, string StageCode, string Line, string WorkStation) {
            object[] results = this.Invoke("SetLightForUnit", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Line,
                        WorkStation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetLightForUnitAsync(string UnitSerialNumber, string StageCode, string Line, string WorkStation) {
            this.SetLightForUnitAsync(UnitSerialNumber, StageCode, Line, WorkStation, null);
        }
        
        /// <remarks/>
        public void SetLightForUnitAsync(string UnitSerialNumber, string StageCode, string Line, string WorkStation, object userState) {
            if ((this.SetLightForUnitOperationCompleted == null)) {
                this.SetLightForUnitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLightForUnitOperationCompleted);
            }
            this.InvokeAsync("SetLightForUnit", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Line,
                        WorkStation}, this.SetLightForUnitOperationCompleted, userState);
        }
        
        private void OnSetLightForUnitOperationCompleted(object arg) {
            if ((this.SetLightForUnitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLightForUnitCompleted(this, new SetLightForUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetLightForComponent", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetLightForComponent(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation) {
            object[] results = this.Invoke("SetLightForComponent", new object[] {
                        UnitSerialNumber,
                        ComponentPartNo,
                        StageCode,
                        Line,
                        WorkStation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetLightForComponentAsync(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation) {
            this.SetLightForComponentAsync(UnitSerialNumber, ComponentPartNo, StageCode, Line, WorkStation, null);
        }
        
        /// <remarks/>
        public void SetLightForComponentAsync(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation, object userState) {
            if ((this.SetLightForComponentOperationCompleted == null)) {
                this.SetLightForComponentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLightForComponentOperationCompleted);
            }
            this.InvokeAsync("SetLightForComponent", new object[] {
                        UnitSerialNumber,
                        ComponentPartNo,
                        StageCode,
                        Line,
                        WorkStation}, this.SetLightForComponentOperationCompleted, userState);
        }
        
        private void OnSetLightForComponentOperationCompleted(object arg) {
            if ((this.SetLightForComponentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLightForComponentCompleted(this, new SetLightForComponentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetLightsForUnitPTL", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetLightsForUnitPTL(string UnitSerialNumber, string StageCode, string Line, string WorkStation) {
            object[] results = this.Invoke("SetLightsForUnitPTL", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Line,
                        WorkStation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetLightsForUnitPTLAsync(string UnitSerialNumber, string StageCode, string Line, string WorkStation) {
            this.SetLightsForUnitPTLAsync(UnitSerialNumber, StageCode, Line, WorkStation, null);
        }
        
        /// <remarks/>
        public void SetLightsForUnitPTLAsync(string UnitSerialNumber, string StageCode, string Line, string WorkStation, object userState) {
            if ((this.SetLightsForUnitPTLOperationCompleted == null)) {
                this.SetLightsForUnitPTLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLightsForUnitPTLOperationCompleted);
            }
            this.InvokeAsync("SetLightsForUnitPTL", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Line,
                        WorkStation}, this.SetLightsForUnitPTLOperationCompleted, userState);
        }
        
        private void OnSetLightsForUnitPTLOperationCompleted(object arg) {
            if ((this.SetLightsForUnitPTLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLightsForUnitPTLCompleted(this, new SetLightsForUnitPTLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetLightsForComponentPTL", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetLightsForComponentPTL(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation) {
            object[] results = this.Invoke("SetLightsForComponentPTL", new object[] {
                        UnitSerialNumber,
                        ComponentPartNo,
                        StageCode,
                        Line,
                        WorkStation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetLightsForComponentPTLAsync(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation) {
            this.SetLightsForComponentPTLAsync(UnitSerialNumber, ComponentPartNo, StageCode, Line, WorkStation, null);
        }
        
        /// <remarks/>
        public void SetLightsForComponentPTLAsync(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation, object userState) {
            if ((this.SetLightsForComponentPTLOperationCompleted == null)) {
                this.SetLightsForComponentPTLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLightsForComponentPTLOperationCompleted);
            }
            this.InvokeAsync("SetLightsForComponentPTL", new object[] {
                        UnitSerialNumber,
                        ComponentPartNo,
                        StageCode,
                        Line,
                        WorkStation}, this.SetLightsForComponentPTLOperationCompleted, userState);
        }
        
        private void OnSetLightsForComponentPTLOperationCompleted(object arg) {
            if ((this.SetLightsForComponentPTLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLightsForComponentPTLCompleted(this, new SetLightsForComponentPTLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/SetLightForComponent_SingleShot", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetLightForComponent_SingleShot(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation, string K2LSingleShot) {
            object[] results = this.Invoke("SetLightForComponent_SingleShot", new object[] {
                        UnitSerialNumber,
                        ComponentPartNo,
                        StageCode,
                        Line,
                        WorkStation,
                        K2LSingleShot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetLightForComponent_SingleShotAsync(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation, string K2LSingleShot) {
            this.SetLightForComponent_SingleShotAsync(UnitSerialNumber, ComponentPartNo, StageCode, Line, WorkStation, K2LSingleShot, null);
        }
        
        /// <remarks/>
        public void SetLightForComponent_SingleShotAsync(string UnitSerialNumber, string ComponentPartNo, string StageCode, string Line, string WorkStation, string K2LSingleShot, object userState) {
            if ((this.SetLightForComponent_SingleShotOperationCompleted == null)) {
                this.SetLightForComponent_SingleShotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLightForComponent_SingleShotOperationCompleted);
            }
            this.InvokeAsync("SetLightForComponent_SingleShot", new object[] {
                        UnitSerialNumber,
                        ComponentPartNo,
                        StageCode,
                        Line,
                        WorkStation,
                        K2LSingleShot}, this.SetLightForComponent_SingleShotOperationCompleted, userState);
        }
        
        private void OnSetLightForComponent_SingleShotOperationCompleted(object arg) {
            if ((this.SetLightForComponent_SingleShotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLightForComponent_SingleShotCompleted(this, new SetLightForComponent_SingleShotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/AddMOFirstPick", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddMOFirstPick(string ManufactureOrder, string StageCode) {
            object[] results = this.Invoke("AddMOFirstPick", new object[] {
                        ManufactureOrder,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddMOFirstPickAsync(string ManufactureOrder, string StageCode) {
            this.AddMOFirstPickAsync(ManufactureOrder, StageCode, null);
        }
        
        /// <remarks/>
        public void AddMOFirstPickAsync(string ManufactureOrder, string StageCode, object userState) {
            if ((this.AddMOFirstPickOperationCompleted == null)) {
                this.AddMOFirstPickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMOFirstPickOperationCompleted);
            }
            this.InvokeAsync("AddMOFirstPick", new object[] {
                        ManufactureOrder,
                        StageCode}, this.AddMOFirstPickOperationCompleted, userState);
        }
        
        private void OnAddMOFirstPickOperationCompleted(object arg) {
            if ((this.AddMOFirstPickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMOFirstPickCompleted(this, new AddMOFirstPickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CDSIReadinessCheck", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CDSIReadinessCheck(string ManufactureOrder, string MfgType) {
            object[] results = this.Invoke("CDSIReadinessCheck", new object[] {
                        ManufactureOrder,
                        MfgType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CDSIReadinessCheckAsync(string ManufactureOrder, string MfgType) {
            this.CDSIReadinessCheckAsync(ManufactureOrder, MfgType, null);
        }
        
        /// <remarks/>
        public void CDSIReadinessCheckAsync(string ManufactureOrder, string MfgType, object userState) {
            if ((this.CDSIReadinessCheckOperationCompleted == null)) {
                this.CDSIReadinessCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDSIReadinessCheckOperationCompleted);
            }
            this.InvokeAsync("CDSIReadinessCheck", new object[] {
                        ManufactureOrder,
                        MfgType}, this.CDSIReadinessCheckOperationCompleted, userState);
        }
        
        private void OnCDSIReadinessCheckOperationCompleted(object arg) {
            if ((this.CDSIReadinessCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDSIReadinessCheckCompleted(this, new CDSIReadinessCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/GetPalletType", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPalletType(string ManufactureOrder, string StageCode) {
            object[] results = this.Invoke("GetPalletType", new object[] {
                        ManufactureOrder,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPalletTypeAsync(string ManufactureOrder, string StageCode) {
            this.GetPalletTypeAsync(ManufactureOrder, StageCode, null);
        }
        
        /// <remarks/>
        public void GetPalletTypeAsync(string ManufactureOrder, string StageCode, object userState) {
            if ((this.GetPalletTypeOperationCompleted == null)) {
                this.GetPalletTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPalletTypeOperationCompleted);
            }
            this.InvokeAsync("GetPalletType", new object[] {
                        ManufactureOrder,
                        StageCode}, this.GetPalletTypeOperationCompleted, userState);
        }
        
        private void OnGetPalletTypeOperationCompleted(object arg) {
            if ((this.GetPalletTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPalletTypeCompleted(this, new GetPalletTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckNewSKUHold", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckNewSKUHold(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckNewSKUHold", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckNewSKUHoldAsync(string UnitSerialNumber, string StageCode) {
            this.CheckNewSKUHoldAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckNewSKUHoldAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckNewSKUHoldOperationCompleted == null)) {
                this.CheckNewSKUHoldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckNewSKUHoldOperationCompleted);
            }
            this.InvokeAsync("CheckNewSKUHold", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckNewSKUHoldOperationCompleted, userState);
        }
        
        private void OnCheckNewSKUHoldOperationCompleted(object arg) {
            if ((this.CheckNewSKUHoldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckNewSKUHoldCompleted(this, new CheckNewSKUHoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/NeedEngrave", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NeedEngrave(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("NeedEngrave", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NeedEngraveAsync(string UnitSerialNumber, string StageCode) {
            this.NeedEngraveAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void NeedEngraveAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.NeedEngraveOperationCompleted == null)) {
                this.NeedEngraveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNeedEngraveOperationCompleted);
            }
            this.InvokeAsync("NeedEngrave", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.NeedEngraveOperationCompleted, userState);
        }
        
        private void OnNeedEngraveOperationCompleted(object arg) {
            if ((this.NeedEngraveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NeedEngraveCompleted(this, new NeedEngraveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/EngraveFinish", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EngraveFinish(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("EngraveFinish", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EngraveFinishAsync(string UnitSerialNumber, string StageCode) {
            this.EngraveFinishAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void EngraveFinishAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.EngraveFinishOperationCompleted == null)) {
                this.EngraveFinishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEngraveFinishOperationCompleted);
            }
            this.InvokeAsync("EngraveFinish", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.EngraveFinishOperationCompleted, userState);
        }
        
        private void OnEngraveFinishOperationCompleted(object arg) {
            if ((this.EngraveFinishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EngraveFinishCompleted(this, new EngraveFinishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/InsertSandraDSJOB", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertSandraDSJOB(int PostDataType, string KeyData1, string KeyData2, string KeyData3, string KeyData4, string KeyData5, string KeyData6, string KeyData7, int Status, string PlanDeliveryDate, string UpdateBy, string StageCode) {
            object[] results = this.Invoke("InsertSandraDSJOB", new object[] {
                        PostDataType,
                        KeyData1,
                        KeyData2,
                        KeyData3,
                        KeyData4,
                        KeyData5,
                        KeyData6,
                        KeyData7,
                        Status,
                        PlanDeliveryDate,
                        UpdateBy,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertSandraDSJOBAsync(int PostDataType, string KeyData1, string KeyData2, string KeyData3, string KeyData4, string KeyData5, string KeyData6, string KeyData7, int Status, string PlanDeliveryDate, string UpdateBy, string StageCode) {
            this.InsertSandraDSJOBAsync(PostDataType, KeyData1, KeyData2, KeyData3, KeyData4, KeyData5, KeyData6, KeyData7, Status, PlanDeliveryDate, UpdateBy, StageCode, null);
        }
        
        /// <remarks/>
        public void InsertSandraDSJOBAsync(int PostDataType, string KeyData1, string KeyData2, string KeyData3, string KeyData4, string KeyData5, string KeyData6, string KeyData7, int Status, string PlanDeliveryDate, string UpdateBy, string StageCode, object userState) {
            if ((this.InsertSandraDSJOBOperationCompleted == null)) {
                this.InsertSandraDSJOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSandraDSJOBOperationCompleted);
            }
            this.InvokeAsync("InsertSandraDSJOB", new object[] {
                        PostDataType,
                        KeyData1,
                        KeyData2,
                        KeyData3,
                        KeyData4,
                        KeyData5,
                        KeyData6,
                        KeyData7,
                        Status,
                        PlanDeliveryDate,
                        UpdateBy,
                        StageCode}, this.InsertSandraDSJOBOperationCompleted, userState);
        }
        
        private void OnInsertSandraDSJOBOperationCompleted(object arg) {
            if ((this.InsertSandraDSJOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSandraDSJOBCompleted(this, new InsertSandraDSJOBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/InsertSandraDSJOBSql", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertSandraDSJOBSql(int PostDataType, string KeyData1, string KeyData2, string KeyData3, string KeyData4, string KeyData5, string KeyData6, string KeyData7, int Status, string PlanDeliveryDate, string UpdateBy, string StageCode) {
            object[] results = this.Invoke("InsertSandraDSJOBSql", new object[] {
                        PostDataType,
                        KeyData1,
                        KeyData2,
                        KeyData3,
                        KeyData4,
                        KeyData5,
                        KeyData6,
                        KeyData7,
                        Status,
                        PlanDeliveryDate,
                        UpdateBy,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertSandraDSJOBSqlAsync(int PostDataType, string KeyData1, string KeyData2, string KeyData3, string KeyData4, string KeyData5, string KeyData6, string KeyData7, int Status, string PlanDeliveryDate, string UpdateBy, string StageCode) {
            this.InsertSandraDSJOBSqlAsync(PostDataType, KeyData1, KeyData2, KeyData3, KeyData4, KeyData5, KeyData6, KeyData7, Status, PlanDeliveryDate, UpdateBy, StageCode, null);
        }
        
        /// <remarks/>
        public void InsertSandraDSJOBSqlAsync(int PostDataType, string KeyData1, string KeyData2, string KeyData3, string KeyData4, string KeyData5, string KeyData6, string KeyData7, int Status, string PlanDeliveryDate, string UpdateBy, string StageCode, object userState) {
            if ((this.InsertSandraDSJOBSqlOperationCompleted == null)) {
                this.InsertSandraDSJOBSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSandraDSJOBSqlOperationCompleted);
            }
            this.InvokeAsync("InsertSandraDSJOBSql", new object[] {
                        PostDataType,
                        KeyData1,
                        KeyData2,
                        KeyData3,
                        KeyData4,
                        KeyData5,
                        KeyData6,
                        KeyData7,
                        Status,
                        PlanDeliveryDate,
                        UpdateBy,
                        StageCode}, this.InsertSandraDSJOBSqlOperationCompleted, userState);
        }
        
        private void OnInsertSandraDSJOBSqlOperationCompleted(object arg) {
            if ((this.InsertSandraDSJOBSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSandraDSJOBSqlCompleted(this, new InsertSandraDSJOBSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Basic.WebService/WebService/CheckHipot", RequestNamespace="http://localhost/Basic.WebService/WebService", ResponseNamespace="http://localhost/Basic.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsProcessStartData CheckHipot(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckHipot", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsProcessStartData)(results[0]));
        }
        
        /// <remarks/>
        public void CheckHipotAsync(string UnitSerialNumber, string StageCode) {
            this.CheckHipotAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckHipotAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckHipotOperationCompleted == null)) {
                this.CheckHipotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckHipotOperationCompleted);
            }
            this.InvokeAsync("CheckHipot", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckHipotOperationCompleted, userState);
        }
        
        private void OnCheckHipotOperationCompleted(object arg) {
            if ((this.CheckHipotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckHipotCompleted(this, new CheckHipotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsDLSkill {
        
        private string userIDField;
        
        private string stageCodeField;
        
        private string workStationField;
        
        private string aPIDField;
        
        private string plantCodeField;
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string APID {
            get {
                return this.aPIDField;
            }
            set {
                this.aPIDField = value;
            }
        }
        
        /// <remarks/>
        public string PlantCode {
            get {
                return this.plantCodeField;
            }
            set {
                this.plantCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsSO {
        
        private string soField;
        
        private string sOLineField;
        
        private string customerPOField;
        
        private string customerPOLineField;
        
        private string endCustomerPOField;
        
        private string endCustomerPOLineNoField;
        
        private string productGroupField;
        
        /// <remarks/>
        public string SO {
            get {
                return this.soField;
            }
            set {
                this.soField = value;
            }
        }
        
        /// <remarks/>
        public string SOLine {
            get {
                return this.sOLineField;
            }
            set {
                this.sOLineField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerPO {
            get {
                return this.customerPOField;
            }
            set {
                this.customerPOField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerPOLine {
            get {
                return this.customerPOLineField;
            }
            set {
                this.customerPOLineField = value;
            }
        }
        
        /// <remarks/>
        public string EndCustomerPO {
            get {
                return this.endCustomerPOField;
            }
            set {
                this.endCustomerPOField = value;
            }
        }
        
        /// <remarks/>
        public string EndCustomerPOLineNo {
            get {
                return this.endCustomerPOLineNoField;
            }
            set {
                this.endCustomerPOLineNoField = value;
            }
        }
        
        /// <remarks/>
        public string ProductGroup {
            get {
                return this.productGroupField;
            }
            set {
                this.productGroupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsUPNWeightTolerance {
        
        private string modelFamilyField;
        
        private string uPNField;
        
        private string productGroupField;
        
        private string stageField;
        
        private float toleranceTypeField;
        
        private float toleranceField;
        
        private string userIDField;
        
        private System.DateTime createDateField;
        
        private System.DateTime updateDateField;
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string ProductGroup {
            get {
                return this.productGroupField;
            }
            set {
                this.productGroupField = value;
            }
        }
        
        /// <remarks/>
        public string Stage {
            get {
                return this.stageField;
            }
            set {
                this.stageField = value;
            }
        }
        
        /// <remarks/>
        public float ToleranceType {
            get {
                return this.toleranceTypeField;
            }
            set {
                this.toleranceTypeField = value;
            }
        }
        
        /// <remarks/>
        public float Tolerance {
            get {
                return this.toleranceField;
            }
            set {
                this.toleranceField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdateDate {
            get {
                return this.updateDateField;
            }
            set {
                this.updateDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsCompareSetting {
        
        private string uSNExtendField;
        
        private string uSNInfoFromViewField;
        
        private string uPNInfoFromViewField;
        
        private string eRPCategoryField;
        
        private string eRPCPNField;
        
        private string groupField;
        
        private string modelFamilyField;
        
        private string uPNField;
        
        private string materialGroupField;
        
        private string compareItemField;
        
        private string categoryField;
        
        private string custUSNStartField;
        
        private string custUSNLengthField;
        
        private string cartonIDFormatField;
        
        private string uSNInfoField;
        
        private string stageCodeField;
        
        private string uSNSubSettingField;
        
        private string holdWhenCompareFailField;
        
        private string failOverTimesField;
        
        private string holdStageField;
        
        private string holdReasonField;
        
        private string warningSecondField;
        
        private string autoWeightFlagField;
        
        /// <remarks/>
        public string USNExtend {
            get {
                return this.uSNExtendField;
            }
            set {
                this.uSNExtendField = value;
            }
        }
        
        /// <remarks/>
        public string USNInfoFromView {
            get {
                return this.uSNInfoFromViewField;
            }
            set {
                this.uSNInfoFromViewField = value;
            }
        }
        
        /// <remarks/>
        public string UPNInfoFromView {
            get {
                return this.uPNInfoFromViewField;
            }
            set {
                this.uPNInfoFromViewField = value;
            }
        }
        
        /// <remarks/>
        public string ERPCategory {
            get {
                return this.eRPCategoryField;
            }
            set {
                this.eRPCategoryField = value;
            }
        }
        
        /// <remarks/>
        public string ERPCPN {
            get {
                return this.eRPCPNField;
            }
            set {
                this.eRPCPNField = value;
            }
        }
        
        /// <remarks/>
        public string Group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string MaterialGroup {
            get {
                return this.materialGroupField;
            }
            set {
                this.materialGroupField = value;
            }
        }
        
        /// <remarks/>
        public string CompareItem {
            get {
                return this.compareItemField;
            }
            set {
                this.compareItemField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string CustUSNStart {
            get {
                return this.custUSNStartField;
            }
            set {
                this.custUSNStartField = value;
            }
        }
        
        /// <remarks/>
        public string CustUSNLength {
            get {
                return this.custUSNLengthField;
            }
            set {
                this.custUSNLengthField = value;
            }
        }
        
        /// <remarks/>
        public string CartonIDFormat {
            get {
                return this.cartonIDFormatField;
            }
            set {
                this.cartonIDFormatField = value;
            }
        }
        
        /// <remarks/>
        public string USNInfo {
            get {
                return this.uSNInfoField;
            }
            set {
                this.uSNInfoField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string USNSubSetting {
            get {
                return this.uSNSubSettingField;
            }
            set {
                this.uSNSubSettingField = value;
            }
        }
        
        /// <remarks/>
        public string HoldWhenCompareFail {
            get {
                return this.holdWhenCompareFailField;
            }
            set {
                this.holdWhenCompareFailField = value;
            }
        }
        
        /// <remarks/>
        public string FailOverTimes {
            get {
                return this.failOverTimesField;
            }
            set {
                this.failOverTimesField = value;
            }
        }
        
        /// <remarks/>
        public string HoldStage {
            get {
                return this.holdStageField;
            }
            set {
                this.holdStageField = value;
            }
        }
        
        /// <remarks/>
        public string HoldReason {
            get {
                return this.holdReasonField;
            }
            set {
                this.holdReasonField = value;
            }
        }
        
        /// <remarks/>
        public string WarningSecond {
            get {
                return this.warningSecondField;
            }
            set {
                this.warningSecondField = value;
            }
        }
        
        /// <remarks/>
        public string AutoWeightFlag {
            get {
                return this.autoWeightFlagField;
            }
            set {
                this.autoWeightFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsWSConfig {
        
        private int seqField;
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public int Seq {
            get {
                return this.seqField;
            }
            set {
                this.seqField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsWSInfo {
        
        private string assemblyTitleField;
        
        private string assemblyDescriptionField;
        
        private string assemblyCompanyField;
        
        private string assemblyProductField;
        
        private string assemblyCopyrightField;
        
        private string assemblyTrademarkField;
        
        private string assemblyVersionField;
        
        private string cLSCompliantField;
        
        private string debuggableField;
        
        private string guidField;
        
        /// <remarks/>
        public string AssemblyTitle {
            get {
                return this.assemblyTitleField;
            }
            set {
                this.assemblyTitleField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyDescription {
            get {
                return this.assemblyDescriptionField;
            }
            set {
                this.assemblyDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyCompany {
            get {
                return this.assemblyCompanyField;
            }
            set {
                this.assemblyCompanyField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyProduct {
            get {
                return this.assemblyProductField;
            }
            set {
                this.assemblyProductField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyCopyright {
            get {
                return this.assemblyCopyrightField;
            }
            set {
                this.assemblyCopyrightField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyTrademark {
            get {
                return this.assemblyTrademarkField;
            }
            set {
                this.assemblyTrademarkField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyVersion {
            get {
                return this.assemblyVersionField;
            }
            set {
                this.assemblyVersionField = value;
            }
        }
        
        /// <remarks/>
        public string CLSCompliant {
            get {
                return this.cLSCompliantField;
            }
            set {
                this.cLSCompliantField = value;
            }
        }
        
        /// <remarks/>
        public string Debuggable {
            get {
                return this.debuggableField;
            }
            set {
                this.debuggableField = value;
            }
        }
        
        /// <remarks/>
        public string Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class stcUSN {
        
        private string uSNField;
        
        private string moField;
        
        private string cartonField;
        
        private int passCountField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string Carton {
            get {
                return this.cartonField;
            }
            set {
                this.cartonField = value;
            }
        }
        
        /// <remarks/>
        public int PassCount {
            get {
                return this.passCountField;
            }
            set {
                this.passCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsReleaseKey {
        
        private string holdIDField;
        
        private string moField;
        
        private string uSNField;
        
        private string uPNField;
        
        private string modelFamilyField;
        
        private string stageField;
        
        private string releaseIDField;
        
        /// <remarks/>
        public string HoldID {
            get {
                return this.holdIDField;
            }
            set {
                this.holdIDField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string Stage {
            get {
                return this.stageField;
            }
            set {
                this.stageField = value;
            }
        }
        
        /// <remarks/>
        public string ReleaseID {
            get {
                return this.releaseIDField;
            }
            set {
                this.releaseIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsHoldKey {
        
        private string holdIDField;
        
        private string moField;
        
        private string uSNField;
        
        private string uPNField;
        
        private string modelFamilyField;
        
        private string reasonField;
        
        private string stageField;
        
        /// <remarks/>
        public string HoldID {
            get {
                return this.holdIDField;
            }
            set {
                this.holdIDField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string Reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        public string Stage {
            get {
                return this.stageField;
            }
            set {
                this.stageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsGPInfo {
        
        private string uPNField;
        
        private string roHSField;
        
        private string gpField;
        
        private string processField;
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string RoHS {
            get {
                return this.roHSField;
            }
            set {
                this.roHSField = value;
            }
        }
        
        /// <remarks/>
        public string GP {
            get {
                return this.gpField;
            }
            set {
                this.gpField = value;
            }
        }
        
        /// <remarks/>
        public string Process {
            get {
                return this.processField;
            }
            set {
                this.processField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsKeyItem {
        
        private int keyTypeField;
        
        private string keyField;
        
        private string valueField;
        
        private bool checkField;
        
        private bool returnCPNField;
        
        /// <remarks/>
        public int KeyType {
            get {
                return this.keyTypeField;
            }
            set {
                this.keyTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool Check {
            get {
                return this.checkField;
            }
            set {
                this.checkField = value;
            }
        }
        
        /// <remarks/>
        public bool ReturnCPN {
            get {
                return this.returnCPNField;
            }
            set {
                this.returnCPNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsUPNPackage {
        
        private string modelFamilyField;
        
        private string uPNField;
        
        private string productGroupField;
        
        private int levelField;
        
        private int labelTypeField;
        
        private int labelQtyField;
        
        private string packageIDFormatField;
        
        private string packageIDNameField;
        
        private int qtyPerPackageField;
        
        private int packageTypeField;
        
        private string extendCode1Field;
        
        private string extendCode2Field;
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string ProductGroup {
            get {
                return this.productGroupField;
            }
            set {
                this.productGroupField = value;
            }
        }
        
        /// <remarks/>
        public int Level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        /// <remarks/>
        public int LabelType {
            get {
                return this.labelTypeField;
            }
            set {
                this.labelTypeField = value;
            }
        }
        
        /// <remarks/>
        public int LabelQty {
            get {
                return this.labelQtyField;
            }
            set {
                this.labelQtyField = value;
            }
        }
        
        /// <remarks/>
        public string PackageIDFormat {
            get {
                return this.packageIDFormatField;
            }
            set {
                this.packageIDFormatField = value;
            }
        }
        
        /// <remarks/>
        public string PackageIDName {
            get {
                return this.packageIDNameField;
            }
            set {
                this.packageIDNameField = value;
            }
        }
        
        /// <remarks/>
        public int QtyPerPackage {
            get {
                return this.qtyPerPackageField;
            }
            set {
                this.qtyPerPackageField = value;
            }
        }
        
        /// <remarks/>
        public int PackageType {
            get {
                return this.packageTypeField;
            }
            set {
                this.packageTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ExtendCode1 {
            get {
                return this.extendCode1Field;
            }
            set {
                this.extendCode1Field = value;
            }
        }
        
        /// <remarks/>
        public string ExtendCode2 {
            get {
                return this.extendCode2Field;
            }
            set {
                this.extendCode2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsUSNDefect {
        
        private string workStationField;
        
        private string stageCodeField;
        
        private string stageDescriptionField;
        
        private string errorCodeField;
        
        private string errorCodeDescField;
        
        private System.DateTime defectDateField;
        
        private int defectSeqField;
        
        private string userIDField;
        
        private int passCountField;
        
        private string lineField;
        
        private string defectRmarkField;
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StageDescription {
            get {
                return this.stageDescriptionField;
            }
            set {
                this.stageDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorCodeDesc {
            get {
                return this.errorCodeDescField;
            }
            set {
                this.errorCodeDescField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DefectDate {
            get {
                return this.defectDateField;
            }
            set {
                this.defectDateField = value;
            }
        }
        
        /// <remarks/>
        public int DefectSeq {
            get {
                return this.defectSeqField;
            }
            set {
                this.defectSeqField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public int PassCount {
            get {
                return this.passCountField;
            }
            set {
                this.passCountField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string DefectRmark {
            get {
                return this.defectRmarkField;
            }
            set {
                this.defectRmarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsMessage {
        
        private string idField;
        
        private string messageField;
        
        private string languageField;
        
        private string moduleNameField;
        
        private string typeField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string ModuleName {
            get {
                return this.moduleNameField;
            }
            set {
                this.moduleNameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsLabel {
        
        private string uSNField;
        
        private string workStationField;
        
        private string stageCodeField;
        
        private int typeField;
        
        private int cartonLevelField;
        
        private int labelQtyField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int CartonLevel {
            get {
                return this.cartonLevelField;
            }
            set {
                this.cartonLevelField = value;
            }
        }
        
        /// <remarks/>
        public int LabelQty {
            get {
                return this.labelQtyField;
            }
            set {
                this.labelQtyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsESOP {
        
        private string eSOPIDField;
        
        private string modelFamilyField;
        
        private string categoryField;
        
        private string cPNField;
        
        private string workStationField;
        
        private string fileNameField;
        
        private System.DateTime createDateField;
        
        private System.DateTime updateDateField;
        
        private string iDGroupField;
        
        private int pageNumberField;
        
        /// <remarks/>
        public string ESOPID {
            get {
                return this.eSOPIDField;
            }
            set {
                this.eSOPIDField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdateDate {
            get {
                return this.updateDateField;
            }
            set {
                this.updateDateField = value;
            }
        }
        
        /// <remarks/>
        public string IDGroup {
            get {
                return this.iDGroupField;
            }
            set {
                this.iDGroupField = value;
            }
        }
        
        /// <remarks/>
        public int PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsBarcodeValidateResult {
        
        private string cPNField;
        
        private bool resultField;
        
        private string categoryField;
        
        private string cSNFormatField;
        
        private string realCPNField;
        
        private int groupSeqField;
        
        private string cSNField;
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public bool Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string CSNFormat {
            get {
                return this.cSNFormatField;
            }
            set {
                this.cSNFormatField = value;
            }
        }
        
        /// <remarks/>
        public string RealCPN {
            get {
                return this.realCPNField;
            }
            set {
                this.realCPNField = value;
            }
        }
        
        /// <remarks/>
        public int GroupSeq {
            get {
                return this.groupSeqField;
            }
            set {
                this.groupSeqField = value;
            }
        }
        
        /// <remarks/>
        public string CSN {
            get {
                return this.cSNField;
            }
            set {
                this.cSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsRepairedItem {
        
        private string uSNField;
        
        private string oldCSNField;
        
        private string newCSNField;
        
        private string oldCPNField;
        
        private string newCPNField;
        
        private string vendorField;
        
        private string dateCodeField;
        
        private string locationField;
        
        private string remarkField;
        
        private string categoryField;
        
        private string pinNOField;
        
        private string analysisIDField;
        
        private string defectPictureFilenameField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string OldCSN {
            get {
                return this.oldCSNField;
            }
            set {
                this.oldCSNField = value;
            }
        }
        
        /// <remarks/>
        public string NewCSN {
            get {
                return this.newCSNField;
            }
            set {
                this.newCSNField = value;
            }
        }
        
        /// <remarks/>
        public string OldCPN {
            get {
                return this.oldCPNField;
            }
            set {
                this.oldCPNField = value;
            }
        }
        
        /// <remarks/>
        public string NewCPN {
            get {
                return this.newCPNField;
            }
            set {
                this.newCPNField = value;
            }
        }
        
        /// <remarks/>
        public string Vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        /// <remarks/>
        public string DateCode {
            get {
                return this.dateCodeField;
            }
            set {
                this.dateCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string PinNO {
            get {
                return this.pinNOField;
            }
            set {
                this.pinNOField = value;
            }
        }
        
        /// <remarks/>
        public string AnalysisID {
            get {
                return this.analysisIDField;
            }
            set {
                this.analysisIDField = value;
            }
        }
        
        /// <remarks/>
        public string DefectPictureFilename {
            get {
                return this.defectPictureFilenameField;
            }
            set {
                this.defectPictureFilenameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsRepaireInformation {
        
        private string defectPictureFileNameField;
        
        private string uSNField;
        
        private int defectSeqField;
        
        private string stageCodeField;
        
        private string errorCodeField;
        
        private string reasonCodeField;
        
        private string reasonTypeField;
        
        private System.DateTime repairDateField;
        
        private string userIDField;
        
        private string remarkField;
        
        private string checkUsedCategoriesField;
        
        private string notUnLockCategoriesField;
        
        private string boardSeqField;
        
        private clsRepairedItem[] repairedItemsField;
        
        private bool checkCPNPairField;
        
        private string repairCodeField;
        
        private string signalCodeField;
        
        private string signalStatusCodeField;
        
        private string departmentField;
        
        /// <remarks/>
        public string DefectPictureFileName {
            get {
                return this.defectPictureFileNameField;
            }
            set {
                this.defectPictureFileNameField = value;
            }
        }
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public int DefectSeq {
            get {
                return this.defectSeqField;
            }
            set {
                this.defectSeqField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReasonCode {
            get {
                return this.reasonCodeField;
            }
            set {
                this.reasonCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReasonType {
            get {
                return this.reasonTypeField;
            }
            set {
                this.reasonTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RepairDate {
            get {
                return this.repairDateField;
            }
            set {
                this.repairDateField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        public string CheckUsedCategories {
            get {
                return this.checkUsedCategoriesField;
            }
            set {
                this.checkUsedCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public string NotUnLockCategories {
            get {
                return this.notUnLockCategoriesField;
            }
            set {
                this.notUnLockCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public string BoardSeq {
            get {
                return this.boardSeqField;
            }
            set {
                this.boardSeqField = value;
            }
        }
        
        /// <remarks/>
        public clsRepairedItem[] RepairedItems {
            get {
                return this.repairedItemsField;
            }
            set {
                this.repairedItemsField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckCPNPair {
            get {
                return this.checkCPNPairField;
            }
            set {
                this.checkCPNPairField = value;
            }
        }
        
        /// <remarks/>
        public string RepairCode {
            get {
                return this.repairCodeField;
            }
            set {
                this.repairCodeField = value;
            }
        }
        
        /// <remarks/>
        public string SignalCode {
            get {
                return this.signalCodeField;
            }
            set {
                this.signalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string SignalStatusCode {
            get {
                return this.signalStatusCodeField;
            }
            set {
                this.signalStatusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsTransaction {
        
        private string uSNField;
        
        private string moField;
        
        private string uPNField;
        
        private string lineField;
        
        private string workStationField;
        
        private string stageCodeField;
        
        private string[] trnDataField;
        
        private string trnDateField;
        
        private bool resultFlagField;
        
        private string userIDField;
        
        private string modelFamilyField;
        
        private string modelField;
        
        private bool bGAFlagField;
        
        private bool scrapFlagField;
        
        private string scarpTypeField;
        
        private string scrapReasonField;
        
        private string fixtureIDField;
        
        private int nextRouteNameField;
        
        private bool checkTestRouteField;
        
        private string defectRmarkField;
        
        private string nGStageCodeField;
        
        private string cPNField;
        
        private string dIAGField;
        
        private string bIOSField;
        
        private string aPIDField;
        
        private string mandatoryCheckStringField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string[] TrnData {
            get {
                return this.trnDataField;
            }
            set {
                this.trnDataField = value;
            }
        }
        
        /// <remarks/>
        public string TrnDate {
            get {
                return this.trnDateField;
            }
            set {
                this.trnDateField = value;
            }
        }
        
        /// <remarks/>
        public bool ResultFlag {
            get {
                return this.resultFlagField;
            }
            set {
                this.resultFlagField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public bool BGAFlag {
            get {
                return this.bGAFlagField;
            }
            set {
                this.bGAFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool ScrapFlag {
            get {
                return this.scrapFlagField;
            }
            set {
                this.scrapFlagField = value;
            }
        }
        
        /// <remarks/>
        public string ScarpType {
            get {
                return this.scarpTypeField;
            }
            set {
                this.scarpTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ScrapReason {
            get {
                return this.scrapReasonField;
            }
            set {
                this.scrapReasonField = value;
            }
        }
        
        /// <remarks/>
        public string FixtureID {
            get {
                return this.fixtureIDField;
            }
            set {
                this.fixtureIDField = value;
            }
        }
        
        /// <remarks/>
        public int NextRouteName {
            get {
                return this.nextRouteNameField;
            }
            set {
                this.nextRouteNameField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckTestRoute {
            get {
                return this.checkTestRouteField;
            }
            set {
                this.checkTestRouteField = value;
            }
        }
        
        /// <remarks/>
        public string DefectRmark {
            get {
                return this.defectRmarkField;
            }
            set {
                this.defectRmarkField = value;
            }
        }
        
        /// <remarks/>
        public string NGStageCode {
            get {
                return this.nGStageCodeField;
            }
            set {
                this.nGStageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string DIAG {
            get {
                return this.dIAGField;
            }
            set {
                this.dIAGField = value;
            }
        }
        
        /// <remarks/>
        public string BIOS {
            get {
                return this.bIOSField;
            }
            set {
                this.bIOSField = value;
            }
        }
        
        /// <remarks/>
        public string APID {
            get {
                return this.aPIDField;
            }
            set {
                this.aPIDField = value;
            }
        }
        
        /// <remarks/>
        public string MandatoryCheckString {
            get {
                return this.mandatoryCheckStringField;
            }
            set {
                this.mandatoryCheckStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsProcessStartData {
        
        private bool processApprovedField;
        
        private string uSNField;
        
        private string stageCodeField;
        
        private string denialReasonField;
        
        /// <remarks/>
        public bool ProcessApproved {
            get {
                return this.processApprovedField;
            }
            set {
                this.processApprovedField = value;
            }
        }
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string DenialReason {
            get {
                return this.denialReasonField;
            }
            set {
                this.denialReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsProcessStartCheckFlag {
        
        private bool samplingField;
        
        private bool repairField;
        
        private bool batchField;
        
        private bool stageField;
        
        private string batchHoldStageField;
        
        private int checkInOutField;
        
        private bool sFCHoldField;
        
        private bool mORestrictField;
        
        private string lineField;
        
        private MORestrictType mORestrictTypeField;
        
        private bool uPNRestrictField;
        
        private bool mOReadyField;
        
        private string workStationField;
        
        private bool uPNLineAllowanceField;
        
        private string mandatoryCheckStringField;
        
        private string aPIDField;
        
        private string userIDField;
        
        private bool offlineNGField;
        
        private bool disableCheckMandatoryField;
        
        /// <remarks/>
        public bool Sampling {
            get {
                return this.samplingField;
            }
            set {
                this.samplingField = value;
            }
        }
        
        /// <remarks/>
        public bool Repair {
            get {
                return this.repairField;
            }
            set {
                this.repairField = value;
            }
        }
        
        /// <remarks/>
        public bool Batch {
            get {
                return this.batchField;
            }
            set {
                this.batchField = value;
            }
        }
        
        /// <remarks/>
        public bool Stage {
            get {
                return this.stageField;
            }
            set {
                this.stageField = value;
            }
        }
        
        /// <remarks/>
        public string BatchHoldStage {
            get {
                return this.batchHoldStageField;
            }
            set {
                this.batchHoldStageField = value;
            }
        }
        
        /// <remarks/>
        public int CheckInOut {
            get {
                return this.checkInOutField;
            }
            set {
                this.checkInOutField = value;
            }
        }
        
        /// <remarks/>
        public bool SFCHold {
            get {
                return this.sFCHoldField;
            }
            set {
                this.sFCHoldField = value;
            }
        }
        
        /// <remarks/>
        public bool MORestrict {
            get {
                return this.mORestrictField;
            }
            set {
                this.mORestrictField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public MORestrictType MORestrictType {
            get {
                return this.mORestrictTypeField;
            }
            set {
                this.mORestrictTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool UPNRestrict {
            get {
                return this.uPNRestrictField;
            }
            set {
                this.uPNRestrictField = value;
            }
        }
        
        /// <remarks/>
        public bool MOReady {
            get {
                return this.mOReadyField;
            }
            set {
                this.mOReadyField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public bool UPNLineAllowance {
            get {
                return this.uPNLineAllowanceField;
            }
            set {
                this.uPNLineAllowanceField = value;
            }
        }
        
        /// <remarks/>
        public string MandatoryCheckString {
            get {
                return this.mandatoryCheckStringField;
            }
            set {
                this.mandatoryCheckStringField = value;
            }
        }
        
        /// <remarks/>
        public string APID {
            get {
                return this.aPIDField;
            }
            set {
                this.aPIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public bool OfflineNG {
            get {
                return this.offlineNGField;
            }
            set {
                this.offlineNGField = value;
            }
        }
        
        /// <remarks/>
        public bool DisableCheckMandatory {
            get {
                return this.disableCheckMandatoryField;
            }
            set {
                this.disableCheckMandatoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public enum MORestrictType {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        NotCheckMOLine,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsUSNItem {
        
        private int positionField;
        
        private string moField;
        
        private string cSNField;
        
        private string cPNField;
        
        private string cATEGORYField;
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string CSN {
            get {
                return this.cSNField;
            }
            set {
                this.cSNField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string CATEGORY {
            get {
                return this.cATEGORYField;
            }
            set {
                this.cATEGORYField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsUSN {
        
        private string uSNField;
        
        private string uPNField;
        
        private string moField;
        
        private string cATEGORYField;
        
        private string lineField;
        
        private string stageField;
        
        private string nextStageField;
        
        private string tourField;
        
        private string statusField;
        
        private string oldUSNField;
        
        private System.DateTime createDateField;
        
        private System.DateTime updateDateField;
        
        private int eSOPCPNSeqField;
        
        private string routeNameField;
        
        private string startFromStageField;
        
        private string routeTourField;
        
        private string erpPalletIDField;
        
        private string lotNoField;
        
        private int groupSeqField;
        
        private bool needInsertSFCUSNINPROCESSField;
        
        private clsUSNItem[] uSNItemsField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string CATEGORY {
            get {
                return this.cATEGORYField;
            }
            set {
                this.cATEGORYField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string Stage {
            get {
                return this.stageField;
            }
            set {
                this.stageField = value;
            }
        }
        
        /// <remarks/>
        public string NextStage {
            get {
                return this.nextStageField;
            }
            set {
                this.nextStageField = value;
            }
        }
        
        /// <remarks/>
        public string Tour {
            get {
                return this.tourField;
            }
            set {
                this.tourField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string OldUSN {
            get {
                return this.oldUSNField;
            }
            set {
                this.oldUSNField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdateDate {
            get {
                return this.updateDateField;
            }
            set {
                this.updateDateField = value;
            }
        }
        
        /// <remarks/>
        public int ESOPCPNSeq {
            get {
                return this.eSOPCPNSeqField;
            }
            set {
                this.eSOPCPNSeqField = value;
            }
        }
        
        /// <remarks/>
        public string RouteName {
            get {
                return this.routeNameField;
            }
            set {
                this.routeNameField = value;
            }
        }
        
        /// <remarks/>
        public string StartFromStage {
            get {
                return this.startFromStageField;
            }
            set {
                this.startFromStageField = value;
            }
        }
        
        /// <remarks/>
        public string RouteTour {
            get {
                return this.routeTourField;
            }
            set {
                this.routeTourField = value;
            }
        }
        
        /// <remarks/>
        public string ErpPalletID {
            get {
                return this.erpPalletIDField;
            }
            set {
                this.erpPalletIDField = value;
            }
        }
        
        /// <remarks/>
        public string LotNo {
            get {
                return this.lotNoField;
            }
            set {
                this.lotNoField = value;
            }
        }
        
        /// <remarks/>
        public int GroupSeq {
            get {
                return this.groupSeqField;
            }
            set {
                this.groupSeqField = value;
            }
        }
        
        /// <remarks/>
        public bool NeedInsertSFCUSNINPROCESS {
            get {
                return this.needInsertSFCUSNINPROCESSField;
            }
            set {
                this.needInsertSFCUSNINPROCESSField = value;
            }
        }
        
        /// <remarks/>
        public clsUSNItem[] USNItems {
            get {
                return this.uSNItemsField;
            }
            set {
                this.uSNItemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsMOItem {
        
        private int positionField;
        
        private string cPNField;
        
        private string cSNRuleField;
        
        private string categoryField;
        
        private int categorySeqField;
        
        private int sequenceField;
        
        private int eSOPStepField;
        
        private string stageCodeField;
        
        private int dayNField;
        
        private string aLTCPNField;
        
        private string aLTCSNRuleField;
        
        private int groupSeqField;
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string CSNRule {
            get {
                return this.cSNRuleField;
            }
            set {
                this.cSNRuleField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public int CategorySeq {
            get {
                return this.categorySeqField;
            }
            set {
                this.categorySeqField = value;
            }
        }
        
        /// <remarks/>
        public int Sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        public int ESOPStep {
            get {
                return this.eSOPStepField;
            }
            set {
                this.eSOPStepField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public int DayN {
            get {
                return this.dayNField;
            }
            set {
                this.dayNField = value;
            }
        }
        
        /// <remarks/>
        public string ALTCPN {
            get {
                return this.aLTCPNField;
            }
            set {
                this.aLTCPNField = value;
            }
        }
        
        /// <remarks/>
        public string ALTCSNRule {
            get {
                return this.aLTCSNRuleField;
            }
            set {
                this.aLTCSNRuleField = value;
            }
        }
        
        /// <remarks/>
        public int GroupSeq {
            get {
                return this.groupSeqField;
            }
            set {
                this.groupSeqField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsMoInfo {
        
        private int x3CField;
        
        private string productGroupField;
        
        private int k3TypeField;
        
        private string countryCodeField;
        
        private string pCIDField;
        
        private int bSaMField;
        
        private string specSheetVerField;
        
        private string specLabelVerField;
        
        private string crdModelField;
        
        private string softloadPNField;
        
        private string crdNumberField;
        
        private int is220VField;
        
        private int potomacField;
        
        private int cFIField;
        
        private int picassoField;
        
        private string hardwareField;
        
        private string versionField;
        
        private int urgentMoField;
        
        private string fwField;
        
        private string vintageField;
        
        private string biosField;
        
        private string headCodeField;
        
        private string mBSNFRUField;
        
        private string mBSNECNumberField;
        
        /// <remarks/>
        public int X3C {
            get {
                return this.x3CField;
            }
            set {
                this.x3CField = value;
            }
        }
        
        /// <remarks/>
        public string ProductGroup {
            get {
                return this.productGroupField;
            }
            set {
                this.productGroupField = value;
            }
        }
        
        /// <remarks/>
        public int K3Type {
            get {
                return this.k3TypeField;
            }
            set {
                this.k3TypeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PCID {
            get {
                return this.pCIDField;
            }
            set {
                this.pCIDField = value;
            }
        }
        
        /// <remarks/>
        public int BSaM {
            get {
                return this.bSaMField;
            }
            set {
                this.bSaMField = value;
            }
        }
        
        /// <remarks/>
        public string SpecSheetVer {
            get {
                return this.specSheetVerField;
            }
            set {
                this.specSheetVerField = value;
            }
        }
        
        /// <remarks/>
        public string SpecLabelVer {
            get {
                return this.specLabelVerField;
            }
            set {
                this.specLabelVerField = value;
            }
        }
        
        /// <remarks/>
        public string CrdModel {
            get {
                return this.crdModelField;
            }
            set {
                this.crdModelField = value;
            }
        }
        
        /// <remarks/>
        public string SoftloadPN {
            get {
                return this.softloadPNField;
            }
            set {
                this.softloadPNField = value;
            }
        }
        
        /// <remarks/>
        public string CrdNumber {
            get {
                return this.crdNumberField;
            }
            set {
                this.crdNumberField = value;
            }
        }
        
        /// <remarks/>
        public int Is220V {
            get {
                return this.is220VField;
            }
            set {
                this.is220VField = value;
            }
        }
        
        /// <remarks/>
        public int Potomac {
            get {
                return this.potomacField;
            }
            set {
                this.potomacField = value;
            }
        }
        
        /// <remarks/>
        public int CFI {
            get {
                return this.cFIField;
            }
            set {
                this.cFIField = value;
            }
        }
        
        /// <remarks/>
        public int Picasso {
            get {
                return this.picassoField;
            }
            set {
                this.picassoField = value;
            }
        }
        
        /// <remarks/>
        public string Hardware {
            get {
                return this.hardwareField;
            }
            set {
                this.hardwareField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public int UrgentMo {
            get {
                return this.urgentMoField;
            }
            set {
                this.urgentMoField = value;
            }
        }
        
        /// <remarks/>
        public string FW {
            get {
                return this.fwField;
            }
            set {
                this.fwField = value;
            }
        }
        
        /// <remarks/>
        public string Vintage {
            get {
                return this.vintageField;
            }
            set {
                this.vintageField = value;
            }
        }
        
        /// <remarks/>
        public string Bios {
            get {
                return this.biosField;
            }
            set {
                this.biosField = value;
            }
        }
        
        /// <remarks/>
        public string HeadCode {
            get {
                return this.headCodeField;
            }
            set {
                this.headCodeField = value;
            }
        }
        
        /// <remarks/>
        public string MBSNFRU {
            get {
                return this.mBSNFRUField;
            }
            set {
                this.mBSNFRUField = value;
            }
        }
        
        /// <remarks/>
        public string MBSNECNumber {
            get {
                return this.mBSNECNumberField;
            }
            set {
                this.mBSNECNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsMOReady {
        
        private bool tPSFlagField;
        
        private bool labelFlagField;
        
        private bool uSNFlagField;
        
        private bool eSOPFlagField;
        
        private bool readyFlagField;
        
        private bool pTLFlagField;
        
        private bool lCFlagField;
        
        private bool cISFlagField;
        
        private bool rFIDFlagField;
        
        /// <remarks/>
        public bool TPSFlag {
            get {
                return this.tPSFlagField;
            }
            set {
                this.tPSFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool LabelFlag {
            get {
                return this.labelFlagField;
            }
            set {
                this.labelFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool USNFlag {
            get {
                return this.uSNFlagField;
            }
            set {
                this.uSNFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool ESOPFlag {
            get {
                return this.eSOPFlagField;
            }
            set {
                this.eSOPFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool ReadyFlag {
            get {
                return this.readyFlagField;
            }
            set {
                this.readyFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool PTLFlag {
            get {
                return this.pTLFlagField;
            }
            set {
                this.pTLFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool LCFlag {
            get {
                return this.lCFlagField;
            }
            set {
                this.lCFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool CISFlag {
            get {
                return this.cISFlagField;
            }
            set {
                this.cISFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool RFIDFlag {
            get {
                return this.rFIDFlagField;
            }
            set {
                this.rFIDFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsMO {
        
        private string moField;
        
        private int lotField;
        
        private string uPNField;
        
        private string customerPNField;
        
        private string lineField;
        
        private System.DateTime planDateField;
        
        private System.DateTime createDateField;
        
        private System.DateTime updateDateField;
        
        private int inputField;
        
        private int outputField;
        
        private string statusField;
        
        private string soField;
        
        private string sOLineField;
        
        private string bIOSVerField;
        
        private string prodTypeField;
        
        private int shippingTypeField;
        
        private string routeField;
        
        private string uSNRuleField;
        
        private string prodBrandField;
        
        private string mFGTypeField;
        
        private string customNumField;
        
        private string customPOField;
        
        private string endCustomPOField;
        
        private string mBVersionField;
        
        private int mOTypeField;
        
        private string modelField;
        
        private string modelFamilyField;
        
        private string eCNumberField;
        
        private int unitPerPCBField;
        
        private string fRUField;
        
        private string cPNOField;
        
        private string mBSNCPNField;
        
        private string mBSNVERField;
        
        private string storageLocField;
        
        private clsMOReady moReadyField;
        
        private clsMoInfo moInfoField;
        
        private clsMOItem[] moItemsField;
        
        private int moConfigIDField;
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public int Lot {
            get {
                return this.lotField;
            }
            set {
                this.lotField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerPN {
            get {
                return this.customerPNField;
            }
            set {
                this.customerPNField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PlanDate {
            get {
                return this.planDateField;
            }
            set {
                this.planDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdateDate {
            get {
                return this.updateDateField;
            }
            set {
                this.updateDateField = value;
            }
        }
        
        /// <remarks/>
        public int Input {
            get {
                return this.inputField;
            }
            set {
                this.inputField = value;
            }
        }
        
        /// <remarks/>
        public int Output {
            get {
                return this.outputField;
            }
            set {
                this.outputField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string SO {
            get {
                return this.soField;
            }
            set {
                this.soField = value;
            }
        }
        
        /// <remarks/>
        public string SOLine {
            get {
                return this.sOLineField;
            }
            set {
                this.sOLineField = value;
            }
        }
        
        /// <remarks/>
        public string BIOSVer {
            get {
                return this.bIOSVerField;
            }
            set {
                this.bIOSVerField = value;
            }
        }
        
        /// <remarks/>
        public string ProdType {
            get {
                return this.prodTypeField;
            }
            set {
                this.prodTypeField = value;
            }
        }
        
        /// <remarks/>
        public int ShippingType {
            get {
                return this.shippingTypeField;
            }
            set {
                this.shippingTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Route {
            get {
                return this.routeField;
            }
            set {
                this.routeField = value;
            }
        }
        
        /// <remarks/>
        public string USNRule {
            get {
                return this.uSNRuleField;
            }
            set {
                this.uSNRuleField = value;
            }
        }
        
        /// <remarks/>
        public string ProdBrand {
            get {
                return this.prodBrandField;
            }
            set {
                this.prodBrandField = value;
            }
        }
        
        /// <remarks/>
        public string MFGType {
            get {
                return this.mFGTypeField;
            }
            set {
                this.mFGTypeField = value;
            }
        }
        
        /// <remarks/>
        public string CustomNum {
            get {
                return this.customNumField;
            }
            set {
                this.customNumField = value;
            }
        }
        
        /// <remarks/>
        public string CustomPO {
            get {
                return this.customPOField;
            }
            set {
                this.customPOField = value;
            }
        }
        
        /// <remarks/>
        public string EndCustomPO {
            get {
                return this.endCustomPOField;
            }
            set {
                this.endCustomPOField = value;
            }
        }
        
        /// <remarks/>
        public string MBVersion {
            get {
                return this.mBVersionField;
            }
            set {
                this.mBVersionField = value;
            }
        }
        
        /// <remarks/>
        public int MOType {
            get {
                return this.mOTypeField;
            }
            set {
                this.mOTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string ECNumber {
            get {
                return this.eCNumberField;
            }
            set {
                this.eCNumberField = value;
            }
        }
        
        /// <remarks/>
        public int UnitPerPCB {
            get {
                return this.unitPerPCBField;
            }
            set {
                this.unitPerPCBField = value;
            }
        }
        
        /// <remarks/>
        public string FRU {
            get {
                return this.fRUField;
            }
            set {
                this.fRUField = value;
            }
        }
        
        /// <remarks/>
        public string CPNO {
            get {
                return this.cPNOField;
            }
            set {
                this.cPNOField = value;
            }
        }
        
        /// <remarks/>
        public string MBSNCPN {
            get {
                return this.mBSNCPNField;
            }
            set {
                this.mBSNCPNField = value;
            }
        }
        
        /// <remarks/>
        public string MBSNVER {
            get {
                return this.mBSNVERField;
            }
            set {
                this.mBSNVERField = value;
            }
        }
        
        /// <remarks/>
        public string StorageLoc {
            get {
                return this.storageLocField;
            }
            set {
                this.storageLocField = value;
            }
        }
        
        /// <remarks/>
        public clsMOReady MoReady {
            get {
                return this.moReadyField;
            }
            set {
                this.moReadyField = value;
            }
        }
        
        /// <remarks/>
        public clsMoInfo MoInfo {
            get {
                return this.moInfoField;
            }
            set {
                this.moInfoField = value;
            }
        }
        
        /// <remarks/>
        public clsMOItem[] MoItems {
            get {
                return this.moItemsField;
            }
            set {
                this.moItemsField = value;
            }
        }
        
        /// <remarks/>
        public int MoConfigID {
            get {
                return this.moConfigIDField;
            }
            set {
                this.moConfigIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsMOCheckFlag {
        
        private bool sequenceField;
        
        private bool eSOPField;
        
        private bool includeAltCPNField;
        
        /// <remarks/>
        public bool Sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        public bool ESOP {
            get {
                return this.eSOPField;
            }
            set {
                this.eSOPField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeAltCPN {
            get {
                return this.includeAltCPNField;
            }
            set {
                this.includeAltCPNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsUser {
        
        private string userIDField;
        
        private string employeeIDField;
        
        private string userNameField;
        
        private string passwordField;
        
        private string eMailField;
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string EmployeeID {
            get {
                return this.employeeIDField;
            }
            set {
                this.employeeIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string EMail {
            get {
                return this.eMailField;
            }
            set {
                this.eMailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsAppIniItem {
        
        private string sectionField;
        
        private string itemField;
        
        private string valueField;
        
        private string remarkField;
        
        /// <remarks/>
        public string Section {
            get {
                return this.sectionField;
            }
            set {
                this.sectionField = value;
            }
        }
        
        /// <remarks/>
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsAppIni {
        
        private string aPIDField;
        
        private string versionField;
        
        private string workStationField;
        
        private clsAppIniItem[] appInisField;
        
        /// <remarks/>
        public string APID {
            get {
                return this.aPIDField;
            }
            set {
                this.aPIDField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public clsAppIniItem[] AppInis {
            get {
                return this.appInisField;
            }
            set {
                this.appInisField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsWorkStation {
        
        private string mFGTypeField;
        
        private string workStationField;
        
        private string gatewayGroupField;
        
        private string lineField;
        
        private string stageCodeField;
        
        private string workStationIPField;
        
        private string gatewayIPField;
        
        private int portField;
        
        private int hWNodeIDField;
        
        /// <remarks/>
        public string MFGType {
            get {
                return this.mFGTypeField;
            }
            set {
                this.mFGTypeField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string GatewayGroup {
            get {
                return this.gatewayGroupField;
            }
            set {
                this.gatewayGroupField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStationIP {
            get {
                return this.workStationIPField;
            }
            set {
                this.workStationIPField = value;
            }
        }
        
        /// <remarks/>
        public string GatewayIP {
            get {
                return this.gatewayIPField;
            }
            set {
                this.gatewayIPField = value;
            }
        }
        
        /// <remarks/>
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        public int HWNodeID {
            get {
                return this.hWNodeIDField;
            }
            set {
                this.hWNodeIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsPackRackUnit {
        
        private int rackQtyField;
        
        private int rackAvailableQtyField;
        
        private int rackCapacityField;
        
        private string productGroupField;
        
        private PackRackStoreOutType storeOutTypeField;
        
        private string messageField;
        
        private bool packRackResultField;
        
        private string customerMoField;
        
        private string soLineField;
        
        private string soField;
        
        private string workstationField;
        
        private string rackIDField;
        
        private string modelFamilyField;
        
        private string upnField;
        
        private string moField;
        
        private string usnField;
        
        /// <remarks/>
        public int RackQty {
            get {
                return this.rackQtyField;
            }
            set {
                this.rackQtyField = value;
            }
        }
        
        /// <remarks/>
        public int RackAvailableQty {
            get {
                return this.rackAvailableQtyField;
            }
            set {
                this.rackAvailableQtyField = value;
            }
        }
        
        /// <remarks/>
        public int RackCapacity {
            get {
                return this.rackCapacityField;
            }
            set {
                this.rackCapacityField = value;
            }
        }
        
        /// <remarks/>
        public string ProductGroup {
            get {
                return this.productGroupField;
            }
            set {
                this.productGroupField = value;
            }
        }
        
        /// <remarks/>
        public PackRackStoreOutType StoreOutType {
            get {
                return this.storeOutTypeField;
            }
            set {
                this.storeOutTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool PackRackResult {
            get {
                return this.packRackResultField;
            }
            set {
                this.packRackResultField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerMo {
            get {
                return this.customerMoField;
            }
            set {
                this.customerMoField = value;
            }
        }
        
        /// <remarks/>
        public string SoLine {
            get {
                return this.soLineField;
            }
            set {
                this.soLineField = value;
            }
        }
        
        /// <remarks/>
        public string So {
            get {
                return this.soField;
            }
            set {
                this.soField = value;
            }
        }
        
        /// <remarks/>
        public string Workstation {
            get {
                return this.workstationField;
            }
            set {
                this.workstationField = value;
            }
        }
        
        /// <remarks/>
        public string RackID {
            get {
                return this.rackIDField;
            }
            set {
                this.rackIDField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string Upn {
            get {
                return this.upnField;
            }
            set {
                this.upnField = value;
            }
        }
        
        /// <remarks/>
        public string Mo {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string Usn {
            get {
                return this.usnField;
            }
            set {
                this.usnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public enum PackRackStoreOutType {
        
        /// <remarks/>
        ByUsn,
        
        /// <remarks/>
        ByRackID,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsProcessResult {
        
        private string resultField;
        
        private string dataField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsAssignTempLocResult {
        
        private string resultField;
        
        private string dataField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsAssignTempLocFlag {
        
        private string modelFamilyField;
        
        private string uPNField;
        
        private bool eNGVerCheckField;
        
        private string eNGVERField;
        
        private bool mOCheckField;
        
        private string moField;
        
        private bool storageLocCheckField;
        
        private string sTORAGELOCField;
        
        private bool packByProductGroupField;
        
        private string productGroupField;
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public bool ENGVerCheck {
            get {
                return this.eNGVerCheckField;
            }
            set {
                this.eNGVerCheckField = value;
            }
        }
        
        /// <remarks/>
        public string ENGVER {
            get {
                return this.eNGVERField;
            }
            set {
                this.eNGVERField = value;
            }
        }
        
        /// <remarks/>
        public bool MOCheck {
            get {
                return this.mOCheckField;
            }
            set {
                this.mOCheckField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public bool StorageLocCheck {
            get {
                return this.storageLocCheckField;
            }
            set {
                this.storageLocCheckField = value;
            }
        }
        
        /// <remarks/>
        public string STORAGELOC {
            get {
                return this.sTORAGELOCField;
            }
            set {
                this.sTORAGELOCField = value;
            }
        }
        
        /// <remarks/>
        public bool PackByProductGroup {
            get {
                return this.packByProductGroupField;
            }
            set {
                this.packByProductGroupField = value;
            }
        }
        
        /// <remarks/>
        public string ProductGroup {
            get {
                return this.productGroupField;
            }
            set {
                this.productGroupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsAutoSwapResult {
        
        private string uSNField;
        
        private string stageField;
        
        private string lineField;
        
        private string newUSNField;
        
        private string moField;
        
        private string shipmentMOField;
        
        private int resultField;
        
        private string uPNField;
        
        private string sDRChecksumField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string Stage {
            get {
                return this.stageField;
            }
            set {
                this.stageField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string NewUSN {
            get {
                return this.newUSNField;
            }
            set {
                this.newUSNField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string ShipmentMO {
            get {
                return this.shipmentMOField;
            }
            set {
                this.shipmentMOField = value;
            }
        }
        
        /// <remarks/>
        public int Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string SDRChecksum {
            get {
                return this.sDRChecksumField;
            }
            set {
                this.sDRChecksumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public partial class clsBarcodeValidateCheckFlag {
        
        private int replacePositionField;
        
        private int scanTypeField;
        
        private bool sequenceControlField;
        
        private bool addTrnLogField;
        
        private bool includeAltCPNField;
        
        private string userIDField;
        
        private string workStationField;
        
        private string lineField;
        
        private string aPIDField;
        
        private bool assemblyCPNField;
        
        private string checkUsedCategoriesField;
        
        private bool checkWeekCodeField;
        
        private int uSNWeekCodeStartField;
        
        private int uSNWeekCodeLengthField;
        
        private int cSNWeekCodeStartField;
        
        private int cSNWeekCodeLengthField;
        
        private bool checkCheckCodeField;
        
        private int checkCodeStartField;
        
        private int checkCodeLengthField;
        
        private string fAVerifyCSNCategoryField;
        
        private string pCBVerifyCSNCategoryField;
        
        private bool checkMOMACField;
        
        private bool eSOPField;
        
        private string givenCategoryField;
        
        private bool groupSeqControlAssemblyField;
        
        /// <remarks/>
        public int ReplacePosition {
            get {
                return this.replacePositionField;
            }
            set {
                this.replacePositionField = value;
            }
        }
        
        /// <remarks/>
        public int ScanType {
            get {
                return this.scanTypeField;
            }
            set {
                this.scanTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool SequenceControl {
            get {
                return this.sequenceControlField;
            }
            set {
                this.sequenceControlField = value;
            }
        }
        
        /// <remarks/>
        public bool AddTrnLog {
            get {
                return this.addTrnLogField;
            }
            set {
                this.addTrnLogField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeAltCPN {
            get {
                return this.includeAltCPNField;
            }
            set {
                this.includeAltCPNField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string APID {
            get {
                return this.aPIDField;
            }
            set {
                this.aPIDField = value;
            }
        }
        
        /// <remarks/>
        public bool AssemblyCPN {
            get {
                return this.assemblyCPNField;
            }
            set {
                this.assemblyCPNField = value;
            }
        }
        
        /// <remarks/>
        public string CheckUsedCategories {
            get {
                return this.checkUsedCategoriesField;
            }
            set {
                this.checkUsedCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckWeekCode {
            get {
                return this.checkWeekCodeField;
            }
            set {
                this.checkWeekCodeField = value;
            }
        }
        
        /// <remarks/>
        public int USNWeekCodeStart {
            get {
                return this.uSNWeekCodeStartField;
            }
            set {
                this.uSNWeekCodeStartField = value;
            }
        }
        
        /// <remarks/>
        public int USNWeekCodeLength {
            get {
                return this.uSNWeekCodeLengthField;
            }
            set {
                this.uSNWeekCodeLengthField = value;
            }
        }
        
        /// <remarks/>
        public int CSNWeekCodeStart {
            get {
                return this.cSNWeekCodeStartField;
            }
            set {
                this.cSNWeekCodeStartField = value;
            }
        }
        
        /// <remarks/>
        public int CSNWeekCodeLength {
            get {
                return this.cSNWeekCodeLengthField;
            }
            set {
                this.cSNWeekCodeLengthField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckCheckCode {
            get {
                return this.checkCheckCodeField;
            }
            set {
                this.checkCheckCodeField = value;
            }
        }
        
        /// <remarks/>
        public int CheckCodeStart {
            get {
                return this.checkCodeStartField;
            }
            set {
                this.checkCodeStartField = value;
            }
        }
        
        /// <remarks/>
        public int CheckCodeLength {
            get {
                return this.checkCodeLengthField;
            }
            set {
                this.checkCodeLengthField = value;
            }
        }
        
        /// <remarks/>
        public string FAVerifyCSNCategory {
            get {
                return this.fAVerifyCSNCategoryField;
            }
            set {
                this.fAVerifyCSNCategoryField = value;
            }
        }
        
        /// <remarks/>
        public string PCBVerifyCSNCategory {
            get {
                return this.pCBVerifyCSNCategoryField;
            }
            set {
                this.pCBVerifyCSNCategoryField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckMOMAC {
            get {
                return this.checkMOMACField;
            }
            set {
                this.checkMOMACField = value;
            }
        }
        
        /// <remarks/>
        public bool ESOP {
            get {
                return this.eSOPField;
            }
            set {
                this.eSOPField = value;
            }
        }
        
        /// <remarks/>
        public string GivenCategory {
            get {
                return this.givenCategoryField;
            }
            set {
                this.givenCategoryField = value;
            }
        }
        
        /// <remarks/>
        public bool GroupSeqControlAssembly {
            get {
                return this.groupSeqControlAssemblyField;
            }
            set {
                this.groupSeqControlAssemblyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Basic.WebService/WebService")]
    public enum PackRackActionType {
        
        /// <remarks/>
        Allocate,
        
        /// <remarks/>
        StoreIn,
        
        /// <remarks/>
        StoreOut,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckSFCDLSkillCompletedEventHandler(object sender, CheckSFCDLSkillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSFCDLSkillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSFCDLSkillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckATAndTUnitCompletedEventHandler(object sender, CheckATAndTUnitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckATAndTUnitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckATAndTUnitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckNoTouchLabelUnitCompletedEventHandler(object sender, CheckNoTouchLabelUnitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckNoTouchLabelUnitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckNoTouchLabelUnitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecordMOPickTimeCompletedEventHandler(object sender, RecordMOPickTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordMOPickTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordMOPickTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckRepairZoneRestrictionCompletedEventHandler(object sender, CheckRepairZoneRestrictionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRepairZoneRestrictionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRepairZoneRestrictionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BarcodeVerifyByMOCompletedEventHandler(object sender, BarcodeVerifyByMOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BarcodeVerifyByMOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BarcodeVerifyByMOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProcessAutoSwapCompletedEventHandler(object sender, ProcessAutoSwapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAutoSwapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAutoSwapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsAutoSwapResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsAutoSwapResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProcessAutoSwapForCFICompletedEventHandler(object sender, ProcessAutoSwapForCFICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAutoSwapForCFICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAutoSwapForCFICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsAutoSwapResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsAutoSwapResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AssignTempLocationCompletedEventHandler(object sender, AssignTempLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignTempLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignTempLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsAssignTempLocResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsAssignTempLocResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ReleaseTempLocationCompletedEventHandler(object sender, ReleaseTempLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleaseTempLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReleaseTempLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsProcessResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsProcessResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetLightsForOffLineKTLCompletedEventHandler(object sender, SetLightsForOffLineKTLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLightsForOffLineKTLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLightsForOffLineKTLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckOffLineSoftwareRackDataCompletedEventHandler(object sender, CheckOffLineSoftwareRackDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOffLineSoftwareRackDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOffLineSoftwareRackDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckMandatoryDataCompletedEventHandler(object sender, CheckMandatoryDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckMandatoryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckMandatoryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RaisePackRackRequestCompletedEventHandler(object sender, RaisePackRackRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RaisePackRackRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RaisePackRackRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsPackRackUnit pPackRackUnit {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsPackRackUnit)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AssignIDByUSNCompletedEventHandler(object sender, AssignIDByUSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignIDByUSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignIDByUSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadTrnStartDateCompletedEventHandler(object sender, UploadTrnStartDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTrnStartDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTrnStartDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadTrnStartDate1CompletedEventHandler(object sender, UploadTrnStartDate1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTrnStartDate1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTrnStartDate1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUSNHighestGroupSeqCompletedEventHandler(object sender, GetUSNHighestGroupSeqCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNHighestGroupSeqCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNHighestGroupSeqCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RefreshAssemblyGroupSEQCompletedEventHandler(object sender, RefreshAssemblyGroupSEQCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefreshAssemblyGroupSEQCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefreshAssemblyGroupSEQCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetWorkStationGenealogyCompletedEventHandler(object sender, GetWorkStationGenealogyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkStationGenealogyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkStationGenealogyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsWorkStation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsWorkStation[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetApplicationIniCompletedEventHandler(object sender, GetApplicationIniCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationIniCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationIniCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsAppIni Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsAppIni)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetApplicationIniCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUserinformationCompletedEventHandler(object sender, GetUserinformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserinformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserinformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMoGenealogyCompletedEventHandler(object sender, GetMoGenealogyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMoGenealogyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMoGenealogyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsMO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUsnGenealogyCompletedEventHandler(object sender, GetUsnGenealogyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnGenealogyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnGenealogyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsUSN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsUSN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ApproveProcessStartCompletedEventHandler(object sender, ApproveProcessStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApproveProcessStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApproveProcessStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsProcessStartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsProcessStartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CompleteProcessCompletedEventHandler(object sender, CompleteProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CompleteRepairCompletedEventHandler(object sender, CompleteRepairCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteRepairCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteRepairCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckInCompletedEventHandler(object sender, CheckInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckOutCompletedEventHandler(object sender, CheckOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckIn1CompletedEventHandler(object sender, CheckIn1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIn1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIn1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckOut1CompletedEventHandler(object sender, CheckOut1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOut1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOut1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BarcodeValidationCompletedEventHandler(object sender, BarcodeValidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BarcodeValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BarcodeValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsBarcodeValidateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsBarcodeValidateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetESOPCompletedEventHandler(object sender, GetESOPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetESOPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetESOPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsESOP[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsESOP[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetESOP1CompletedEventHandler(object sender, GetESOP1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetESOP1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetESOP1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsESOP[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsESOP[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RequestLabelPrintCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RequestLabelPrintForP2LCompletedEventHandler(object sender, RequestLabelPrintForP2LCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestLabelPrintForP2LCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestLabelPrintForP2LCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PrintUnitLabelByP2LRackCompletedEventHandler(object sender, PrintUnitLabelByP2LRackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintUnitLabelByP2LRackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintUnitLabelByP2LRackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMessageCompletedEventHandler(object sender, GetMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUSNDefectCompletedEventHandler(object sender, GetUSNDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsUSNDefect[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsUSNDefect[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IsCPNCompleteCompletedEventHandler(object sender, IsCPNCompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCPNCompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCPNCompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetNextCPNCompletedEventHandler(object sender, GetNextCPNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextCPNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextCPNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetNextCPN1CompletedEventHandler(object sender, GetNextCPN1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextCPN1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextCPN1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ChkRouteCompletedEventHandler(object sender, ChkRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChkRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChkRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CompleteCompletedEventHandler(object sender, CompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckSamplingCompletedEventHandler(object sender, CheckSamplingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSamplingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSamplingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsProcessStartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsProcessStartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPackageItemCompletedEventHandler(object sender, GetPackageItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUPNPackageCompletedEventHandler(object sender, GetUPNPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUPNPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUPNPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsUPNPackage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsUPNPackage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUPNPackage1CompletedEventHandler(object sender, GetUPNPackage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUPNPackage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUPNPackage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsUPNPackage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsUPNPackage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GeneratePackageIDCompletedEventHandler(object sender, GeneratePackageIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePackageIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePackageIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GeneratePackageID1CompletedEventHandler(object sender, GeneratePackageID1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePackageID1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePackageID1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadMACCompletedEventHandler(object sender, UploadMACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadMACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadMACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSamplingCompletedEventHandler(object sender, GetSamplingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSamplingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSamplingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetNextStageCompletedEventHandler(object sender, GetNextStageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextStageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextStageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetCOACompletedEventHandler(object sender, SetCOACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCOACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCOACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMACCompletedEventHandler(object sender, GetMACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMACOUICompletedEventHandler(object sender, GetMACOUICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMACOUICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMACOUICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IsRoHSItemCompletedEventHandler(object sender, IsRoHSItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRoHSItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRoHSItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VerifyRoHSPairCompletedEventHandler(object sender, VerifyRoHSPairCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyRoHSPairCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyRoHSPairCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VerifyRoHSPair1CompletedEventHandler(object sender, VerifyRoHSPair1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyRoHSPair1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyRoHSPair1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetGPInforCompletedEventHandler(object sender, GetGPInforCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGPInforCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGPInforCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsGPInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsGPInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetItemValueCompletedEventHandler(object sender, GetItemValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsKeyItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsKeyItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HoldOperationCompletedEventHandler(object sender, HoldOperationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HoldOperationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HoldOperationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ReleaseOperationCompletedEventHandler(object sender, ReleaseOperationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleaseOperationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReleaseOperationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BoardExceedRequiredHoursCompletedEventHandler(object sender, BoardExceedRequiredHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoardExceedRequiredHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoardExceedRequiredHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BoardExceedRequiredHours1CompletedEventHandler(object sender, BoardExceedRequiredHours1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoardExceedRequiredHours1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoardExceedRequiredHours1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void P2LStatusUpdateCompletedEventHandler(object sender, P2LStatusUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P2LStatusUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P2LStatusUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPackageIDCompletedEventHandler(object sender, GetPackageIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUSNItemCompletedEventHandler(object sender, GetUSNItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BatchCompleteProcessCompletedEventHandler(object sender, BatchCompleteProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchCompleteProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchCompleteProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetModelNameCompletedEventHandler(object sender, GetModelNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModelNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModelNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLinkUSNCompletedEventHandler(object sender, GetLinkUSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkUSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkUSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLinkUSN1CompletedEventHandler(object sender, GetLinkUSN1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkUSN1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkUSN1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLinkUSNAndMessageCompletedEventHandler(object sender, GetLinkUSNAndMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkUSNAndMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkUSNAndMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUSNIDCompletedEventHandler(object sender, GetUSNIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadUSNItemCompletedEventHandler(object sender, UploadUSNItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadUSNItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadUSNItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetWebServiceInfoCompletedEventHandler(object sender, GetWebServiceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsWSInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsWSInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetWebServiceConfigCompletedEventHandler(object sender, GetWebServiceConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebServiceConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebServiceConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsWSConfig[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsWSConfig[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLabelJobSettingCompletedEventHandler(object sender, GetLabelJobSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabelJobSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabelJobSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsLabel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsLabel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckHoldCompletedEventHandler(object sender, CheckHoldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckHoldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckHoldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UnitExceedRequiredTimesCompletedEventHandler(object sender, UnitExceedRequiredTimesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitExceedRequiredTimesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitExceedRequiredTimesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCompareSettingCompletedEventHandler(object sender, GetCompareSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompareSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompareSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsCompareSetting Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsCompareSetting)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUPNWeightToleranceCompletedEventHandler(object sender, GetUPNWeightToleranceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUPNWeightToleranceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUPNWeightToleranceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsUPNWeightTolerance Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsUPNWeightTolerance)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSOGenealogyCompletedEventHandler(object sender, GetSOGenealogyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSOGenealogyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSOGenealogyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsSO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsSO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GenerateLotNoCompletedEventHandler(object sender, GenerateLotNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GenerateLotNoByMOCompletedEventHandler(object sender, GenerateLotNoByMOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateLotNoByMOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateLotNoByMOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckPrimaryComponentCompletedEventHandler(object sender, CheckPrimaryComponentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPrimaryComponentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPrimaryComponentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] Parameters {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetLightForUnitCompletedEventHandler(object sender, SetLightForUnitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLightForUnitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLightForUnitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetLightForComponentCompletedEventHandler(object sender, SetLightForComponentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLightForComponentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLightForComponentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetLightsForUnitPTLCompletedEventHandler(object sender, SetLightsForUnitPTLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLightsForUnitPTLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLightsForUnitPTLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetLightsForComponentPTLCompletedEventHandler(object sender, SetLightsForComponentPTLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLightsForComponentPTLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLightsForComponentPTLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetLightForComponent_SingleShotCompletedEventHandler(object sender, SetLightForComponent_SingleShotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLightForComponent_SingleShotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLightForComponent_SingleShotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddMOFirstPickCompletedEventHandler(object sender, AddMOFirstPickCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMOFirstPickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMOFirstPickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CDSIReadinessCheckCompletedEventHandler(object sender, CDSIReadinessCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDSIReadinessCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDSIReadinessCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPalletTypeCompletedEventHandler(object sender, GetPalletTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPalletTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPalletTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckNewSKUHoldCompletedEventHandler(object sender, CheckNewSKUHoldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckNewSKUHoldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckNewSKUHoldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NeedEngraveCompletedEventHandler(object sender, NeedEngraveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NeedEngraveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NeedEngraveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EngraveFinishCompletedEventHandler(object sender, EngraveFinishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EngraveFinishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EngraveFinishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertSandraDSJOBCompletedEventHandler(object sender, InsertSandraDSJOBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertSandraDSJOBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertSandraDSJOBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertSandraDSJOBSqlCompletedEventHandler(object sender, InsertSandraDSJOBSqlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertSandraDSJOBSqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertSandraDSJOBSqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckHipotCompletedEventHandler(object sender, CheckHipotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckHipotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckHipotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsProcessStartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsProcessStartData)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591